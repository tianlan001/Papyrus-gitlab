<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:properties="http://www.eclipse.org/sirius/properties/1.0.0" xmlns:properties-advanced-controls="http://www.eclipse.org/papyrus/sirius/properties/advanced/controls" xmlns:tool="http://www.eclipse.org/sirius/description/tool/1.1.0" documentation="Copyright (c) 2022 CEA LIST, Obeo&#xD;&#xA;&#xD;&#xA;All rights reserved. This program and the accompanying materials&#xD;&#xA;are made available under the terms of the Eclipse Public License 2.0&#xD;&#xA;which accompanies this distribution, and is available at&#xD;&#xA;https://www.eclipse.org/legal/epl-2.0/&#xD;&#xA;&#xD;&#xA;SPDX-License-Identifier: EPL-2.0&#xD;&#xA;&#xD;&#xA;Contributors:&#xD;&#xA;     Obeo - Initial API and implementation" name="papyrus" version="12.0.0.2017041100">
  <ownedViewpoints name="UmlProperties" modelFileExtension="uml">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="DummyDiagramForEefProperties" domainClass="uml::Model" preconditionExpression="aql:false" enablePopupBars="true">
      <metamodel href="http://www.eclipse.org/uml2/5.0.0/UML#/"/>
      <defaultLayer name="Default"/>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesCrudServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesHelpContentServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesImageServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesMemberEndServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesMultipleSelectionServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesMultiplicityServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesNamedElementValidationServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesProfileDefinitionServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesUMLServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.papyrus.sirius.properties.uml.services.PropertiesValueSpecificationServices"/>
  </ownedViewpoints>
  <userColorsPalettes name="CD_ColorPalette">
    <entries xsi:type="description:UserFixedColor" red="195" green="215" blue="221" name="CustomBlue"/>
    <entries xsi:type="description:UserFixedColor" red="255" green="255" blue="204" name="CommentColor"/>
    <entries xsi:type="description:UserFixedColor" red="200" green="255" blue="230" name="ConstraintColor"/>
  </userColorsPalettes>
  <extensions xsi:type="properties:ViewExtensionDescription" name="sirius_rules_properties">
    <metamodels href="http://www.eclipse.org/uml2/5.0.0/UML#/"/>
    <metamodels href="http://www.eclipse.org/emf/2002/Ecore#/"/>
    <categories name="Default">
      <pages name="abstraction_uml_page" labelExpression="aql:'UML'" domainClass="uml::Abstraction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Realization)) and not(self.oclIsKindOf(uml::Manifestation)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.0"/>
      <pages name="acceptCallAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::AcceptCallAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.1"/>
      <pages name="acceptEventAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::AcceptEventAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::AcceptCallAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.2"/>
      <pages name="action_uml_page" labelExpression="aql:'UML'" domainClass="uml::Action" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::AcceptEventAction)) and not(self.oclIsKindOf(uml::ClearAssociationAction)) and not(self.oclIsKindOf(uml::CreateObjectAction)) and not(self.oclIsKindOf(uml::DestroyObjectAction)) and not(self.oclIsKindOf(uml::LinkAction)) and not(self.oclIsKindOf(uml::OpaqueAction)) and not(self.oclIsKindOf(uml::RaiseExceptionAction)) and not(self.oclIsKindOf(uml::ReadExtentAction)) and not(self.oclIsKindOf(uml::ReadLinkObjectEndQualifierAction)) and not(self.oclIsKindOf(uml::ReadLinkObjectEndAction)) and not(self.oclIsKindOf(uml::ReadSelfAction)) and not(self.oclIsKindOf(uml::ReadIsClassifiedObjectAction)) and not(self.oclIsKindOf(uml::ReclassifyObjectAction)) and not(self.oclIsKindOf(uml::ReduceAction)) and not(self.oclIsKindOf(uml::ReplyAction)) and not(self.oclIsKindOf(uml::StartClassifierBehaviorAction)) and not(self.oclIsKindOf(uml::StructuralFeatureAction)) and not(self.oclIsKindOf(uml::StructuredActivityNode)) and not(self.oclIsKindOf(uml::TestIdentityAction)) and not(self.oclIsKindOf(uml::InvocationAction)) and not(self.oclIsKindOf(uml::UnmarshallAction)) and not(self.oclIsKindOf(uml::ValueSpecificationAction)) and not(self.oclIsKindOf(uml::VariableAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.3"/>
      <pages name="actionExecutionSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::ActionExecutionSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.4"/>
      <pages name="actionInputPin_uml_page" labelExpression="aql:'UML'" domainClass="uml::ActionInputPin" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.5"/>
      <pages name="activity_uml_page" labelExpression="aql:'UML'" domainClass="uml::Activity" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.6"/>
      <pages name="activityEdge_uml_page" labelExpression="aql:'UML'" domainClass="uml::ActivityEdge" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ControlFlow)) and not(self.oclIsKindOf(uml::ObjectFlow)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.7"/>
      <pages name="activityFinalNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ActivityFinalNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.8"/>
      <pages name="activityNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ActivityNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ControlNode)) and not(self.oclIsKindOf(uml::ExecutableNode)) and not(self.oclIsKindOf(uml::ObjectNode)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.9"/>
      <pages name="activityParameterNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ActivityParameterNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.10"/>
      <pages name="activityPartition_uml_page" labelExpression="aql:'UML'" domainClass="uml::ActivityPartition" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.11"/>
      <pages name="actor_uml_page" labelExpression="aql:'UML'" domainClass="uml::Actor" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.12"/>
      <pages name="addStructuralFeatureValueAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::AddStructuralFeatureValueAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.13"/>
      <pages name="addVariableValueAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::AddVariableValueAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.14"/>
      <pages name="anyReceiveEvent_uml_page" labelExpression="aql:'UML'" domainClass="uml::AnyReceiveEvent" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.15"/>
      <pages name="artifact_uml_page" labelExpression="aql:'UML'" domainClass="uml::Artifact" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::DeploymentSpecification)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.16"/>
      <pages name="association_uml_page" labelExpression="aql:'UML'" domainClass="uml::Association" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::AssociationClass)) and not(self.oclIsKindOf(uml::CommunicationPath)) and not(self.oclIsKindOf(uml::Extension)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.17 //@extensions.0/@categories.0/@groups.234"/>
      <pages name="associationClass_uml_page" labelExpression="aql:'UML'" domainClass="uml::AssociationClass" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.18 //@extensions.0/@categories.0/@groups.234"/>
      <pages name="behavior_uml_page" labelExpression="aql:'UML'" domainClass="uml::Behavior" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Activity)) and not(self.oclIsKindOf(uml::Interaction)) and not(self.oclIsKindOf(uml::OpaqueBehavior)) and not(self.oclIsKindOf(uml::StateMachine)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.19"/>
      <pages name="behavioralFeature_uml_page" labelExpression="aql:'UML'" domainClass="uml::BehavioralFeature" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Operation)) and not(self.oclIsKindOf(uml::Reception)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.20"/>
      <pages name="behavioredClassifier_uml_page" labelExpression="aql:'UML'" domainClass="uml::BehavioredClassifier" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Actor)) and not(self.oclIsKindOf(uml::Class)) and not(self.oclIsKindOf(uml::Collaboration)) and not(self.oclIsKindOf(uml::UseCase)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.30"/>
      <pages name="behaviorExecutionSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::BehaviorExecutionSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.21"/>
      <pages name="broadcastSignalAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::BroadcastSignalAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.22"/>
      <pages name="callAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::CallAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::CallOperationAction)) and not(self.oclIsKindOf(uml::CallBehaviorAction)) and not(self.oclIsKindOf(uml::StartObjectBehaviorAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.23"/>
      <pages name="callBehaviorAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::CallBehaviorAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.24"/>
      <pages name="callEvent_uml_page" labelExpression="aql:'UML'" domainClass="uml::CallEvent" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.25"/>
      <pages name="callOperationAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::CallOperationAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.26"/>
      <pages name="centralBufferNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::CentralBufferNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::DataStoreNode)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.27"/>
      <pages name="changeEvent_uml_page" labelExpression="aql:'UML'" domainClass="uml::ChangeEvent" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.28"/>
      <pages name="class_uml_page" labelExpression="aql:'UML'" domainClass="uml::Class" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::AssociationClass)) and not(self.oclIsKindOf(uml::Behavior)) and not(self.oclIsKindOf(uml::Component)) and not(self.oclIsKindOf(uml::Node)) and not(self.oclIsKindOf(uml::Stereotype)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.29"/>
      <pages name="classifier_uml_page" labelExpression="aql:'UML'" domainClass="uml::Classifier" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Artifact)) and not(self.oclIsKindOf(uml::Association)) and not(self.oclIsKindOf(uml::BehavioredClassifier)) and not(self.oclIsKindOf(uml::DataType)) and not(self.oclIsKindOf(uml::InformationItem))  and not(self.oclIsKindOf(uml::Interface)) and not(self.oclIsKindOf(uml::Signal)) and not(self.oclIsKindOf(uml::StructuredClassifier))  and not(self.oclIsKindOf(uml::UseCase)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.30"/>
      <pages name="classifierTemplateParameter_uml_page" labelExpression="aql:'UML'" domainClass="uml::ClassifierTemplateParameter" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.31"/>
      <pages name="clause_uml_page" labelExpression="aql:'UML'" domainClass="uml::Clause" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.32"/>
      <pages name="clearAssociationAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ClearAssociationAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.33"/>
      <pages name="clearStructuralFeatureAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ClearStructuralFeatureAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.34"/>
      <pages name="clearVariableAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ClearVariableAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.35"/>
      <pages name="collaboration_uml_page" labelExpression="aql:'UML'" domainClass="uml::Collaboration" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.36"/>
      <pages name="collaborationUse_uml_page" labelExpression="aql:'UML'" domainClass="uml::CollaborationUse" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.37"/>
      <pages name="combinedFragment_uml_page" labelExpression="aql:'UML'" domainClass="uml::CombinedFragment" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ConsiderIgnoreFragment)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.38"/>
      <pages name="comment_uml_page" labelExpression="aql:'UML'" domainClass="uml::Comment" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.39"/>
      <pages name="communicationPath_uml_page" labelExpression="aql:'UML'" domainClass="uml::CommunicationPath" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.40"/>
      <pages name="component_uml_page" labelExpression="aql:'UML'" domainClass="uml::Component" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.41"/>
      <pages name="componentRealization_uml_page" labelExpression="aql:'UML'" domainClass="uml::ComponentRealization" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.42"/>
      <pages name="conditionalNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ConditionalNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.43"/>
      <pages name="connectableElement_uml_page" labelExpression="aql:'UML'" domainClass="uml::ConnectableElement" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Parameter)) and not(self.oclIsKindOf(uml::Property)) and not(self.oclIsKindOf(uml::Variable)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.44"/>
      <pages name="connectableElementTemplateParameter_uml_page" labelExpression="aql:'UML'" domainClass="uml::ConnectableElementTemplateParameter" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.45"/>
      <pages name="connectionPointReference_uml_page" labelExpression="aql:'UML'" domainClass="uml::ConnectionPointReference" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.46"/>
      <pages name="connector_uml_page" labelExpression="aql:'UML'" domainClass="uml::Connector" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.47"/>
      <pages name="connectorEnd_uml_page" labelExpression="aql:'UML'" domainClass="uml::ConnectorEnd" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.48"/>
      <pages name="considerIgnoreFragment_uml_page" labelExpression="aql:'UML'" domainClass="uml::ConsiderIgnoreFragment" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.49"/>
      <pages name="constraint_uml_page" labelExpression="aql:'UML'" domainClass="uml::Constraint" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::IntervalConstraint)) and not(self.oclIsKindOf(uml::InteractionConstraint)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.50"/>
      <pages name="continuation_uml_page" labelExpression="aql:'UML'" domainClass="uml::Continuation" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.51"/>
      <pages name="controlFlow_uml_page" labelExpression="aql:'UML'" domainClass="uml::ControlFlow" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.52"/>
      <pages name="controlNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ControlNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::DecisionNode)) and not(self.oclIsKindOf(uml::FinalNode)) and not(self.oclIsKindOf(uml::ForkNode))  and not(self.oclIsKindOf(uml::InitialNode)) and not(self.oclIsKindOf(uml::JoinNode)) and not(self.oclIsKindOf(uml::MergeNode)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.53"/>
      <pages name="createLinkAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::CreateLinkAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::CreateLinkObjectAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.54"/>
      <pages name="createLinkObjectAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::CreateLinkObjectAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.55"/>
      <pages name="createObjectAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::CreateObjectAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.56"/>
      <pages name="dataStoreNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::DataStoreNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.57"/>
      <pages name="dataType_uml_page" labelExpression="aql:'UML'" domainClass="uml::DataType" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Enumeration)) and not(self.oclIsKindOf(uml::PrimitiveType)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.58"/>
      <pages name="decisionNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::DecisionNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.59"/>
      <pages name="dependency_uml_page" labelExpression="aql:'UML'" domainClass="uml::Dependency" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Abstraction)) and not(self.oclIsKindOf(uml::Deployment)) and not(self.oclIsKindOf(uml::Usage)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.60"/>
      <pages name="deployedArtifact_uml_page" labelExpression="aql:'UML'" domainClass="uml::DeployedArtifact" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Artifact)) and not(self.oclIsKindOf(uml::InstanceSpecification)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.61"/>
      <pages name="deployment_uml_page" labelExpression="aql:'UML'" domainClass="uml::Deployment" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.62"/>
      <pages name="deploymentSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::DeploymentSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.63"/>
      <pages name="deploymentTarget_uml_page" labelExpression="aql:'UML'" domainClass="uml::DeploymentTarget" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::InstanceSpecification)) and not(self.oclIsKindOf(uml::Node)) and not(self.oclIsKindOf(uml::Property)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.64"/>
      <pages name="destroyLinkAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::DestroyLinkAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.66"/>
      <pages name="destroyObjectAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::DestroyObjectAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.67"/>
      <pages name="device_uml_page" labelExpression="aql:'UML'" domainClass="uml::Device" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.65"/>
      <pages name="duration_uml_page" labelExpression="aql:'UML'" domainClass="uml::Duration" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.68"/>
      <pages name="durationConstraint_uml_page" labelExpression="aql:'UML'" domainClass="uml::DurationConstraint" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.69"/>
      <pages name="durationInterval_uml_page" labelExpression="aql:'UML'" domainClass="uml::DurationInterval" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.70"/>
      <pages name="durationObservation_uml_page" labelExpression="aql:'UML'" domainClass="uml::DurationObservation" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.71"/>
      <pages name="elementImport_uml_page" labelExpression="aql:'UML'" domainClass="uml::ElementImport" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.72"/>
      <pages name="encapsulatedClassifier_uml_page" labelExpression="aql:'UML'" domainClass="uml::EncapsulatedClassifier" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Class)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.30"/>
      <pages name="enumeration_uml_page" labelExpression="aql:'UML'" domainClass="uml::Enumeration" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.73"/>
      <pages name="enumerationLiteral_uml_page" labelExpression="aql:'UML'" domainClass="uml::EnumerationLiteral" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.74"/>
      <pages name="event_uml_page" labelExpression="aql:'UML'" domainClass="uml::Event" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ChangeEvent)) and not(self.oclIsKindOf(uml::MessageEvent)) and not(self.oclIsKindOf(uml::TimeEvent)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.75"/>
      <pages name="exceptionHandler_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExceptionHandler" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.76"/>
      <pages name="executableNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExecutableNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Action)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.77"/>
      <pages name="executionEnvironment_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExecutionEnvironment" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.78"/>
      <pages name="executionOccurrenceSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExecutionOccurrenceSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.79"/>
      <pages name="executionSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExecutionSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ActionExecutionSpecification)) and not(self.oclIsKindOf(uml::BehaviorExecutionSpecification)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.80"/>
      <pages name="expansionNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExpansionNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.81"/>
      <pages name="expansionRegion_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExpansionRegion" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.82"/>
      <pages name="expression_uml_page" labelExpression="aql:'UML'" domainClass="uml::Expression" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::StringExpression)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.83"/>
      <pages name="extend_uml_page" labelExpression="aql:'UML'" domainClass="uml::Extend" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.84"/>
      <pages name="extension_uml_page" labelExpression="aql:'UML'" domainClass="uml::Extension" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.85"/>
      <pages name="extensionPoint_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExtensionPoint" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.86"/>
      <pages name="extensionEnd_uml_page" labelExpression="aql:'UML'" domainClass="uml::ExtensionEnd" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.87"/>
      <pages name="feature_uml_page" labelExpression="aql:'UML'" domainClass="uml::Feature" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::BehavioralFeature)) and not(self.oclIsKindOf(uml::Connector)) and not(self.oclIsKindOf(uml::StructuralFeature)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.88"/>
      <pages name="finalNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::FinalNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::FlowFinalNode)) and not(self.oclIsKindOf(uml::ActivityFinalNode)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.89"/>
      <pages name="finalState_uml_page" labelExpression="aql:'UML'" domainClass="uml::FinalState" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.90"/>
      <pages name="flowFinalNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::FlowFinalNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.53"/>
      <pages name="forkNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ForkNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.53"/>
      <pages name="functionBehavior_uml_page" labelExpression="aql:'UML'" domainClass="uml::FunctionBehavior" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.91"/>
      <pages name="gate_uml_page" labelExpression="aql:'UML'" domainClass="uml::Gate" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.92"/>
      <pages name="generalOrdering_uml_page" labelExpression="aql:'UML'" domainClass="uml::GeneralOrdering" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.93"/>
      <pages name="generalization_uml_page" labelExpression="aql:'UML'" domainClass="uml::Generalization" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.94"/>
      <pages name="generalizationSet_uml_page" labelExpression="aql:'UML'" domainClass="uml::GeneralizationSet" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.95"/>
      <pages name="image_uml_page" labelExpression="aql:'UML'" domainClass="uml::Image" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.96"/>
      <pages name="include_uml_page" labelExpression="aql:'UML'" domainClass="uml::Include" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.97"/>
      <pages name="informationFlow_uml_page" labelExpression="aql:'UML'" domainClass="uml::InformationFlow" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.98"/>
      <pages name="informationItem_uml_page" labelExpression="aql:'UML'" domainClass="uml::InformationItem" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.99"/>
      <pages name="initialNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::InitialNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.100"/>
      <pages name="inputPin_uml_page" labelExpression="aql:'UML'" domainClass="uml::InputPin" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ActionInputPin)) and not(self.oclIsKindOf(uml::ValuePin)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.101"/>
      <pages name="instanceSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::InstanceSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::EnumerationLiteral)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.102"/>
      <pages name="instanceValue_uml_page" labelExpression="aql:'UML'" domainClass="uml::InstanceValue" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.103"/>
      <pages name="interaction_uml_page" labelExpression="aql:'UML'" domainClass="uml::Interaction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.104"/>
      <pages name="interactionConstraint_uml_page" labelExpression="aql:'UML'" domainClass="uml::InteractionConstraint" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.105"/>
      <pages name="interactionFragment_uml_page" labelExpression="aql:'UML'" domainClass="uml::InteractionFragment" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::CombinedFragment)) and not(self.oclIsKindOf(uml::Continuation)) and not(self.oclIsKindOf(uml::ExecutionSpecification)) and not(self.oclIsKindOf(uml::Interaction)) and not(self.oclIsKindOf(uml::InteractionOperand)) and not(self.oclIsKindOf(uml::InteractionUse)) and not(self.oclIsKindOf(uml::OccurrenceSpecification)) and not(self.oclIsKindOf(uml::StateInvariant)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.106"/>
      <pages name="interactionOperand_uml_page" labelExpression="aql:'UML'" domainClass="uml::InteractionOperand" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.107"/>
      <pages name="interactionUse_uml_page" labelExpression="aql:'UML'" domainClass="uml::InteractionUse" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::PartDecomposition))  and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.108"/>
      <pages name="interface_uml_page" labelExpression="aql:'UML'" domainClass="uml::Interface" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.109"/>
      <pages name="interfaceRealization_uml_page" labelExpression="aql:'UML'" domainClass="uml::InterfaceRealization" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.110"/>
      <pages name="interruptibleActivityRegion_uml_page" labelExpression="aql:'UML'" domainClass="uml::InterruptibleActivityRegion" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.111" indented="true"/>
      <pages name="interval_uml_page" labelExpression="aql:'UML'" domainClass="uml::Interval" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::DurationInterval)) and not(self.oclIsKindOf(uml::TimeInterval)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.112"/>
      <pages name="intervalConstraint_uml_page" labelExpression="aql:'UML'" domainClass="uml::IntervalConstraint" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::TimeConstraint)) and not(self.oclIsKindOf(uml::DurationConstraint)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.113"/>
      <pages name="invocationAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::InvocationAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::BroadcastSignalAction)) and not(self.oclIsKindOf(uml::CallAction)) and not(self.oclIsKindOf(uml::SendSignalAction)) and not(self.oclIsKindOf(uml::SendObjectAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.114"/>
      <pages name="joinNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::JoinNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.115"/>
      <pages name="lifeline_uml_page" labelExpression="aql:'UML'" domainClass="uml::Lifeline" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.116"/>
      <pages name="linkAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::LinkAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ReadLinkAction)) and not(self.oclIsKindOf(uml::WriteLinkAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.117"/>
      <pages name="linkEndCreationData_uml_page" labelExpression="aql:'UML'" domainClass="uml::LinkEndCreationData" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.118"/>
      <pages name="linkEndData_uml_page" labelExpression="aql:'UML'" domainClass="uml::LinkEndData" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::LinkEndCreationData)) and not(self.oclIsKindOf(uml::LinkEndDestructionData)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.119"/>
      <pages name="linkEndDestructionData_uml_page" labelExpression="aql:'UML'" domainClass="uml::LinkEndDestructionData" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.120"/>
      <pages name="literalBoolean_uml_page" labelExpression="aql:'UML'" domainClass="uml::LiteralBoolean" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.121"/>
      <pages name="literalInteger_uml_page" labelExpression="aql:'UML'" domainClass="uml::LiteralInteger" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.122"/>
      <pages name="literalNull_uml_page" labelExpression="aql:'UML'" domainClass="uml::LiteralNull" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.123"/>
      <pages name="literalReal_uml_page" labelExpression="aql:'UML'" domainClass="uml::LiteralReal" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.124"/>
      <pages name="literalSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::LiteralSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::LiteralBoolean)) and not(self.oclIsKindOf(uml::LiteralInteger)) and not(self.oclIsKindOf(uml::LiteralNull)) and not(self.oclIsKindOf(uml::LiteralReal)) and not(self.oclIsKindOf(uml::LiteralString)) and not(self.oclIsKindOf(uml::LiteralUnlimitedNatural)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.125"/>
      <pages name="literalString_uml_page" labelExpression="aql:'UML'" domainClass="uml::LiteralString" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.126"/>
      <pages name="literalUnlimitedNatural_uml_page" labelExpression="aql:'UML'" domainClass="uml::LiteralUnlimitedNatural" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.127"/>
      <pages name="loopNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::LoopNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.128"/>
      <pages name="manifestation_uml_page" labelExpression="aql:'UML'" domainClass="uml::Manifestation" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.129"/>
      <pages name="mergeNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::MergeNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.130"/>
      <pages name="message_uml_page" labelExpression="aql:'UML'" domainClass="uml::Message" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.131"/>
      <pages name="messageEnd_uml_page" labelExpression="aql:'UML'" domainClass="uml::MessageEnd" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Gate)) and not(self.oclIsKindOf(uml::MessageOccurrenceSpecification)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.132"/>
      <pages name="messageEvent_uml_page" labelExpression="aql:'UML'" domainClass="uml::MessageEvent" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::AnyReceiveEvent)) and not(self.oclIsKindOf(uml::CallEvent)) and not(self.oclIsKindOf(uml::SignalEvent)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.133"/>
      <pages name="messageOccurrenceSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::MessageOccurrenceSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.134"/>
      <pages name="metaclass_uml_page" labelExpression="aql:'UML'" domainClass="uml::Class" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:self.isMetaclass() and not(input.getContextSelections()->size()>1)" groups="//@extensions.0/@categories.0/@groups.135"/>
      <pages name="model_uml_page" labelExpression="aql:'UML'" domainClass="uml::Model" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.136"/>
      <pages name="multiplicityElement_uml_page" labelExpression="aql:'UML'" domainClass="uml::MultiplicityElement" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Parameter)) and not(self.oclIsKindOf(uml::ConnectorEnd)) and not(self.oclIsKindOf(uml::Pin)) and not(self.oclIsKindOf(uml::StructuralFeature)) and not(self.oclIsKindOf(uml::Variable)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.137"/>
      <pages name="namedElement_uml_page" labelExpression="aql:'UML'" domainClass="uml::NamedElement" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ActivityPartition)) and not(self.oclIsKindOf(uml::CollaborationUse)) and not(self.oclIsKindOf(uml::DeployedArtifact)) and not(self.oclIsKindOf(uml::DeploymentTarget)) and not(self.oclIsKindOf(uml::Extend)) and not(self.oclIsKindOf(uml::GeneralOrdering)) and not(self.oclIsKindOf(uml::Include)) and not(self.oclIsKindOf(uml::InteractionFragment)) and not(self.oclIsKindOf(uml::InterruptibleActivityRegion)) and not(self.oclIsKindOf(uml::Lifeline)) and not(self.oclIsKindOf(uml::Message)) and not(self.oclIsKindOf(uml::MessageEnd)) and not(self.oclIsKindOf(uml::Namespace)) and not(self.oclIsKindOf(uml::PackageableElement)) and not(self.oclIsKindOf(uml::ParameterSet)) and not(self.oclIsKindOf(uml::RedefinableElement)) and not(self.oclIsKindOf(uml::StructuredActivityNode)) and not(self.oclIsKindOf(uml::Substitution)) and not(self.oclIsKindOf(uml::Trigger)) and not(self.oclIsKindOf(uml::TypedElement)) and not(self.oclIsKindOf(uml::Vertex)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.138" indented="true"/>
      <pages name="namedspace_uml_page" labelExpression="aql:'UML'" domainClass="uml::Namespace" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::BehavioralFeature)) and not(self.oclIsKindOf(uml::Classifier)) and not(self.oclIsKindOf(uml::InteractionOperand)) and not(self.oclIsKindOf(uml::Package)) and not(self.oclIsKindOf(uml::Transition)) and not(self.oclIsKindOf(uml::Region)) and not(self.oclIsKindOf(uml::State)) and not(self.oclIsKindOf(uml::StructuredActivityNode)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.139"/>
      <pages name="node_uml_page" labelExpression="aql:'UML'" domainClass="uml::Node" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Device)) and not(self.oclIsKindOf(uml::ExecutionEnvironment)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.140"/>
      <pages name="observation_uml_page" labelExpression="aql:'UML'" domainClass="uml::Observation" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::DurationObservation)) and not(self.oclIsKindOf(uml::TimeObservation)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.143"/>
      <pages name="objectFlow_uml_page" labelExpression="aql:'UML'" domainClass="uml::ObjectFlow" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.141"/>
      <pages name="objectNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::ObjectNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ActivityParameterNode)) and not(self.oclIsKindOf(uml::CentralBufferNode)) and not(self.oclIsKindOf(uml::ExpansionNode)) and not(self.oclIsKindOf(uml::Pin)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.142"/>
      <pages name="occurrenceSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::OccurrenceSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::MessageOccurrenceSpecification)) and not(self.oclIsKindOf(uml::ExecutionOccurrenceSpecification))  and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.144"/>
      <pages name="opaqueAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::OpaqueAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.145"/>
      <pages name="opaqueBehavior_uml_page" labelExpression="aql:'UML'" domainClass="uml::OpaqueBehavior" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::FunctionBehavior)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.146"/>
      <pages name="opaqueExpression_uml_page" labelExpression="aql:'UML'" domainClass="uml::OpaqueExpression" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.147"/>
      <pages name="operation_uml_page" labelExpression="aql:'UML'" domainClass="uml::Operation" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.148"/>
      <pages name="operationTemplateParameter_uml_page" labelExpression="aql:'UML'" domainClass="uml::OperationTemplateParameter" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.149"/>
      <pages name="outputPin_uml_page" labelExpression="aql:'UML'" domainClass="uml::OutputPin" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.150"/>
      <pages name="package_uml_page" labelExpression="aql:'UML'" domainClass="uml::Package" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Model)) and not(self.oclIsKindOf(uml::Profile)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.151"/>
      <pages name="packageableElement_uml_page" labelExpression="aql:'UML'" domainClass="uml::PackageableElement" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Constraint)) and not(self.oclIsKindOf(uml::Dependency))  and not(self.oclIsKindOf(uml::Event)) and not(self.oclIsKindOf(uml::GeneralizationSet)) and not(self.oclIsKindOf(uml::InformationFlow)) and not(self.oclIsKindOf(uml::InstanceSpecification)) and not(self.oclIsKindOf(uml::Observation)) and not(self.oclIsKindOf(uml::Package)) and not(self.oclIsKindOf(uml::Type)) and not(self.oclIsKindOf(uml::ValueSpecification)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.152"/>
      <pages name="packageImport_uml_page" labelExpression="aql:'UML'" domainClass="uml::PackageImport" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.153"/>
      <pages name="packageMerge_uml_page" labelExpression="aql:'UML'" domainClass="uml::PackageMerge" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.154"/>
      <pages name="parameter_uml_page" labelExpression="aql:'UML'" domainClass="uml::Parameter" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.155"/>
      <pages name="parameterSet_uml_page" labelExpression="aql:'UML'" domainClass="uml::ParameterSet" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.156"/>
      <pages name="partDecomposition_uml_page" labelExpression="aql:'UML'" domainClass="uml::PartDecomposition" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.157"/>
      <pages name="pin_uml_page" labelExpression="aql:'UML'" domainClass="uml::Pin" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::OutputPin)) and not(self.oclIsKindOf(uml::InputPin)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.158"/>
      <pages name="port_uml_page" labelExpression="aql:'UML'" domainClass="uml::Port" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.159"/>
      <pages name="primitiveType_uml_page" labelExpression="aql:'UML'" domainClass="uml::PrimitiveType" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.160"/>
      <pages name="profile_uml_page" labelExpression="aql:'UML'" domainClass="uml::Profile" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.161"/>
      <pages name="profileApplication_uml_page" labelExpression="aql:'UML'" domainClass="uml::ProfileApplication" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.162"/>
      <pages name="property_uml_page" labelExpression="aql:'UML'" domainClass="uml::Property" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Port)) and not(self.oclIsKindOf(uml::ExtensionEnd)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.163"/>
      <pages name="protocolStateMachine_uml_page" labelExpression="aql:'UML'" domainClass="uml::ProtocolStateMachine" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.164"/>
      <pages name="protocolTransition_uml_page" labelExpression="aql:'UML'" domainClass="uml::ProtocolTransition" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.165"/>
      <pages name="pseudoState_uml_page" labelExpression="aql:'UML'" domainClass="uml::Pseudostate" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.166"/>
      <pages name="qualifierValue_uml_page" labelExpression="aql:'UML'" domainClass="uml::QualifierValue" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.167"/>
      <pages name="raiseExceptionAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::RaiseExceptionAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.168"/>
      <pages name="readExtentAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReadExtentAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.169"/>
      <pages name="readIsClassifiedObjectAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReadIsClassifiedObjectAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.170"/>
      <pages name="readLinkAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReadLinkAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.171"/>
      <pages name="readLinkObjectEndAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReadLinkObjectEndAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.172"/>
      <pages name="readLinkObjectEndQualifierAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReadLinkObjectEndQualifierAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.173"/>
      <pages name="readSelfAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReadSelfAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.174"/>
      <pages name="readStructuralFeatureAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReadStructuralFeatureAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.175"/>
      <pages name="readVariableAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReadVariableAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.176"/>
      <pages name="realization_uml_page" labelExpression="aql:'UML'" domainClass="uml::Realization" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Substitution)) and not(self.oclIsKindOf(uml::InterfaceRealization)) and not(self.oclIsKindOf(uml::ComponentRealization)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.179"/>
      <pages name="reception_uml_page" labelExpression="aql:'UML'" domainClass="uml::Reception" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.180"/>
      <pages name="reclassifyObjectAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReclassifyObjectAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.177"/>
      <pages name="redefinableElement_uml_page" labelExpression="aql:'UML'" domainClass="uml::RedefinableElement" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ActivityNode)) and not(self.oclIsKindOf(uml::ActivityEdge)) and not(self.oclIsKindOf(uml::Classifier)) and not(self.oclIsKindOf(uml::ExtensionPoint)) and not(self.oclIsKindOf(uml::Feature)) and not(self.oclIsKindOf(uml::RedefinableTemplateSignature)) and not(self.oclIsKindOf(uml::Region)) and not(self.oclIsKindOf(uml::Transition)) and not(self.oclIsKindOf(uml::State)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.181"/>
      <pages name="redefinableTemplateSignature_uml_page" labelExpression="aql:'UML'" domainClass="uml::RedefinableTemplateSignature" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.182"/>
      <pages name="reduceAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReduceAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.178"/>
      <pages name="region_uml_page" labelExpression="aql:'UML'" domainClass="uml::Region" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.183"/>
      <pages name="removeStructuralFeatureValueAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::RemoveStructuralFeatureValueAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.184"/>
      <pages name="removeVariableValueAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::RemoveVariableValueAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.185"/>
      <pages name="replyAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ReplyAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.186"/>
      <pages name="sendObjectAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::SendObjectAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.187"/>
      <pages name="sendSignalAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::SendSignalAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.188" indented="true"/>
      <pages name="sequenceNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::SequenceNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.189"/>
      <pages name="signal_uml_page" labelExpression="aql:'UML'" domainClass="uml::Signal" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.190"/>
      <pages name="signalEvent_uml_page" labelExpression="aql:'UML'" domainClass="uml::SignalEvent" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.191"/>
      <pages name="slot_uml_page" labelExpression="aql:'UML'" domainClass="uml::Slot" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.192"/>
      <pages name="startClassifierBehaviorAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::StartClassifierBehaviorAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.193"/>
      <pages name="startObjectBehaviorAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::StartObjectBehaviorAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.194"/>
      <pages name="state_uml_page" labelExpression="aql:'UML'" domainClass="uml::State" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::FinalState)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.195"/>
      <pages name="stateInvariant_uml_page" labelExpression="aql:'UML'" domainClass="uml::StateInvariant" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.196"/>
      <pages name="stateMachine_uml_page" labelExpression="aql:'UML'" domainClass="uml::StateMachine" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ProtocolStateMachine)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.197"/>
      <pages name="stereotype_uml_page" labelExpression="aql:'UML'" domainClass="uml::Stereotype" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.198"/>
      <pages name="stringExpression_uml_page" labelExpression="aql:'UML'" domainClass="uml::StringExpression" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.199"/>
      <pages name="structuralFeature_uml_page" labelExpression="aql:'UML'" domainClass="uml::StructuralFeature" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Property)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.200"/>
      <pages name="structuralFeatureAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::StructuralFeatureAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ClearStructuralFeatureAction)) and not(self.oclIsKindOf(uml::ReadStructuralFeatureAction)) and not(self.oclIsKindOf(uml::WriteStructuralFeatureAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.201"/>
      <pages name="structuredActivityNode_uml_page" labelExpression="aql:'UML'" domainClass="uml::StructuredActivityNode" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::SequenceNode)) and not(self.oclIsKindOf(uml::ConditionalNode)) and not(self.oclIsKindOf(uml::ExpansionRegion)) and not(self.oclIsKindOf(uml::LoopNode)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.202"/>
      <pages name="structuredClassifier_uml_page" labelExpression="aql:'UML'" domainClass="uml::StructuredClassifier" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::EncapsulatedClassifier)) and not(self.oclIsKindOf(uml::Collaboration)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.30"/>
      <pages name="substitution_uml_page" labelExpression="aql:'UML'" domainClass="uml::Substitution" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.203"/>
      <pages name="templateBinding_uml_page" labelExpression="aql:'UML'" domainClass="uml::TemplateBinding" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.204"/>
      <pages name="templateParameter_uml_page" labelExpression="aql:'UML'" domainClass="uml::TemplateParameter" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ClassifierTemplateParameter)) and not(self.oclIsKindOf(uml::OperationTemplateParameter)) and not(self.oclIsKindOf(uml::ConnectableElementTemplateParameter)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.205"/>
      <pages name="templateParameterSubstitution_uml_page" labelExpression="aql:'UML'" domainClass="uml::TemplateParameterSubstitution" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.206"/>
      <pages name="testIdentityAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::TestIdentityAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.207"/>
      <pages name="timeConstraint_uml_page" labelExpression="aql:'UML'" domainClass="uml::TimeConstraint" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.208"/>
      <pages name="timeEvent_uml_page" labelExpression="aql:'UML'" domainClass="uml::TimeEvent" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.209"/>
      <pages name="timeExpression_uml_page" labelExpression="aql:'UML'" domainClass="uml::TimeExpression" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.210"/>
      <pages name="timeInterval_uml_page" labelExpression="aql:'UML'" domainClass="uml::TimeInterval" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.211"/>
      <pages name="timeObservation_uml_page" labelExpression="aql:'UML'" domainClass="uml::TimeObservation" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.212"/>
      <pages name="transition_uml_page" labelExpression="aql:'UML'" domainClass="uml::Transition" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ProtocolTransition)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.213"/>
      <pages name="trigger_uml_page" labelExpression="aql:'UML'" domainClass="uml::Trigger" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.214"/>
      <pages name="type_uml_page" labelExpression="aql:'UML'" domainClass="uml::Type" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Classifier))  and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.215"/>
      <pages name="typedElement_uml_page" labelExpression="aql:'UML'" domainClass="uml::TypedElement" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ValueSpecification)) and not(self.oclIsKindOf(uml::ConnectableElement)) and not(self.oclIsKindOf(uml::ObjectNode)) and not(self.oclIsKindOf(uml::StructuralFeature)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.216"/>
      <pages name="unmarshallAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::UnmarshallAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.217"/>
      <pages name="usage_uml_page" labelExpression="aql:'UML'" domainClass="uml::Usage" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.218"/>
      <pages name="useCase_uml_page" labelExpression="aql:'UML'" domainClass="uml::UseCase" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.219"/>
      <pages name="valuePin_uml_page" labelExpression="aql:'UML'" domainClass="uml::ValuePin" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.220"/>
      <pages name="valueSpecification_uml_page" labelExpression="aql:'UML'" domainClass="uml::ValueSpecification" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Duration)) and not(self.oclIsKindOf(uml::Expression)) and not(self.oclIsKindOf(uml::InstanceValue)) and not(self.oclIsKindOf(uml::Interval)) and not(self.oclIsKindOf(uml::LiteralSpecification)) and not(self.oclIsKindOf(uml::OpaqueExpression))  and not(self.oclIsKindOf(uml::TimeExpression)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.221"/>
      <pages name="valueSpecificationAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::ValueSpecificationAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.222"/>
      <pages name="variable_uml_page" labelExpression="aql:'UML'" domainClass="uml::Variable" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.223"/>
      <pages name="variableAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::VariableAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::WriteVariableAction)) and not(self.oclIsKindOf(uml::ClearVariableAction)) and not(self.oclIsKindOf(uml::ReadVariableAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.224"/>
      <pages name="vertex_uml_page" labelExpression="aql:'UML'" domainClass="uml::Vertex" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::ConnectionPointReference)) and not(self.oclIsKindOf(uml::Pseudostate)) and not(self.oclIsKindOf(uml::State)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.225"/>
      <pages name="writeLinkAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::WriteLinkAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::CreateLinkAction)) and not(self.oclIsKindOf(uml::DestroyLinkAction))  and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.226"/>
      <pages name="writeStructuralFeatureAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::WriteStructuralFeatureAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::AddStructuralFeatureValueAction)) and not(self.oclIsKindOf(uml::RemoveStructuralFeatureValueAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.227"/>
      <pages name="writeVariableAction_uml_page" labelExpression="aql:'UML'" domainClass="uml::WriteVariableAction" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::AddVariableValueAction)) and not(self.oclIsKindOf(uml::RemoveVariableValueAction)) and not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.228"/>
      <pages name="uml_multipleSelection_page" labelExpression="aql:'UML'" domainClass="uml::Element" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:input.getSelectedSemanticElements()->size()>1" groups="//@extensions.0/@categories.0/@groups.229"/>
      <pages name="element_comments_page" labelExpression="aql:'Comments'" domainClass="uml::Element" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1)" groups="//@extensions.0/@categories.0/@groups.230"/>
      <pages name="profile_definition_page" labelExpression="aql:'Definition'" domainClass="uml::Profile" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1) and not(self.isMetaclass())" groups="//@extensions.0/@categories.0/@groups.235"/>
      <pages name="profileDefinition_definition_page" labelExpression="aql:'Definition'" domainClass="ecore::EPackage" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(input.getContextSelections()->size()>1)" groups="//@extensions.0/@categories.0/@groups.236"/>
      <pages name="element_profile_page" labelExpression="aql:'Profile'" domainClass="uml::Element" semanticCandidateExpression="aql:input.getSemanticElement()" preconditionExpression="aql:not(self.oclIsKindOf(uml::Stereotype)) and not(input.getContextSelections()->size()>1)" groups="//@extensions.0/@categories.0/@groups.233 //@extensions.0/@categories.0/@groups.232"/>
      <groups name="abstraction_uml_group" domainClass="uml::Abstraction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="mapping" labelExpression="aql:'Mapping'" helpExpression="aql:self.getFeatureDescription('mapping')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mapping').changeable" referenceNameExpression="aql:'mapping'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'mapping'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'mapping')"/>
        <validationSet>
          <propertyValidationRules name="abstraction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.0/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="acceptCallAction_uml_group" domainClass="uml::AcceptCallAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnmarshall" labelExpression="aql:'Is unmarshall'" helpExpression="aql:self.getFeatureDescription('isUnmarshall')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnmarshall').changeable" valueExpression="feature:isUnmarshall">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnmarshall',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="returnInformation" labelExpression="aql:'Return information'" helpExpression="aql:self.getFeatureDescription('returnInformation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('returnInformation').changeable" referenceNameExpression="aql:'returnInformation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'returnInformation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'returnInformation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="trigger" labelExpression="aql:'Trigger'" helpExpression="aql:self.getFeatureDescription('trigger')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('trigger').changeable" referenceNameExpression="aql:'trigger'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'trigger'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'trigger')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="acceptCallAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.1/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="acceptEventAction_uml_group" domainClass="uml::AcceptEventAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnmarshall" labelExpression="aql:'Is unmarshall'" helpExpression="aql:self.getFeatureDescription('isUnmarshall')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnmarshall').changeable" valueExpression="feature:isUnmarshall">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnmarshall',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="trigger" labelExpression="aql:'Trigger'" helpExpression="aql:self.getFeatureDescription('trigger')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('trigger').changeable" referenceNameExpression="aql:'trigger'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'trigger'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'trigger')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="acceptEventAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.2/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="action_uml_group" domainClass="uml::Action" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="action_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.3/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="actionExcutionSpecification_uml_group" domainClass="uml::ActionExecutionSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="action" labelExpression="aql:'Action'" helpExpression="aql:self.getFeatureDescription('action')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('action').changeable" referenceNameExpression="aql:'action'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'action'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'action')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="finish" labelExpression="aql:'Finish'" helpExpression="aql:self.getFeatureDescription('finish')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('finish').changeable" referenceNameExpression="aql:'finish'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'finish'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'finish')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="start" labelExpression="aql:'Start'" helpExpression="aql:self.getFeatureDescription('start')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('start').changeable" referenceNameExpression="aql:'start'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'start'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'start')"/>
        <validationSet>
          <propertyValidationRules name="actionExcutionSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.4/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="actionInputPin_uml_group" domainClass="uml::ActionInputPin" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControl" labelExpression="aql:'Is control'" helpExpression="aql:self.getFeatureDescription('isControl')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControl').changeable" valueExpression="feature:isControl">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControl',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="fromAction" labelExpression="aql:'From action'" helpExpression="aql:self.getFeatureDescription('fromAction')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('fromAction').changeable" referenceNameExpression="aql:'fromAction'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'fromAction'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'fromAction')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="actionInputPin_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.5/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="actionInputPin_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.5/@controls.8">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="activity_uml_group" domainClass="uml::Activity" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReadOnly" labelExpression="aql:'Is read only'" helpExpression="aql:self.getFeatureDescription('isReadOnly')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReadOnly').changeable" valueExpression="feature:isReadOnly">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReadOnly',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReentrant" labelExpression="aql:'Is reentrant'" helpExpression="aql:self.getFeatureDescription('isReentrant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReentrant').changeable" valueExpression="feature:isReentrant">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReentrant',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isSingleExecution" labelExpression="aql:'Is single execution'" helpExpression="aql:self.getFeatureDescription('isSingleExecution')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isSingleExecution').changeable" valueExpression="feature:isSingleExecution">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isSingleExecution',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="precondition" labelExpression="aql:'Precondition'" helpExpression="aql:self.getFeatureDescription('precondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('precondition').changeable" referenceNameExpression="aql:'precondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'precondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'precondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="postcondition" labelExpression="aql:'Postcondition'" helpExpression="aql:self.getFeatureDescription('postcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('postcondition').changeable" referenceNameExpression="aql:'postcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'postcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'postcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameter" labelExpression="aql:'Owned parameter'" helpExpression="aql:self.getFeatureDescription('ownedParameter')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameter').changeable" referenceNameExpression="aql:'ownedParameter'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameter'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameter')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="variable" labelExpression="aql:'Variable'" helpExpression="aql:self.getFeatureDescription('variable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('variable').changeable" referenceNameExpression="aql:'variable'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'variable'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'variable')"/>
        <validationSet>
          <propertyValidationRules name="activity_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.6/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="activityEdge_uml_group" domainClass="uml::ActivityEdge" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="guard" labelExpression="aql:'Guard'" helpExpression="aql:self.getFeatureDescription('guard')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('guard').changeable" referenceNameExpression="aql:'guard'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'guard'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'guard')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="weight" labelExpression="aql:'Weight'" helpExpression="aql:self.getFeatureDescription('weight')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('weight').changeable" referenceNameExpression="aql:'weight'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'weight'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'weight')"/>
        <validationSet>
          <propertyValidationRules name="activityEdge_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.7/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="activityFinalNode_uml_group" domainClass="uml::ActivityFinalNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="activityFinalNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.8/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="activityNode_uml_group" domainClass="uml::ActivityNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="activityNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.9/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="activityParameterNode_uml_group" domainClass="uml::ActivityParameterNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="parameter" labelExpression="aql:'Parameter'" helpExpression="aql:self.getFeatureDescription('parameter')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('parameter').changeable" referenceNameExpression="aql:'parameter'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'parameter'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'parameter')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="activityParameterNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.10/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="activityPartition_uml_group" domainClass="uml::ActivityPartition" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDimension" labelExpression="Is dimension" helpExpression="aql:self.getFeatureDescription('isDimension')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDimension').changeable" valueExpression="feature:isDimension">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDimension',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isExternal" labelExpression="aql:'Is external'" helpExpression="aql:self.getFeatureDescription('isExternal')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isExternal').changeable" valueExpression="feature:isExternal">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isExternal',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="represents" labelExpression="aql:'Represents'" helpExpression="aql:self.getFeatureDescription('represents')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('represents').changeable" referenceNameExpression="aql:'represents'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'represents'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'represents')"/>
        <validationSet>
          <propertyValidationRules name="activityPartition_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.11/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="actor_uml_group" domainClass="uml::Actor" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="actor_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.12/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="addStructuralFeatureValueAction_uml_group" domainClass="uml::AddStructuralFeatureValueAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReplaceAll" labelExpression="aql:'Is replace all'" helpExpression="aql:self.getFeatureDescription('isReplaceAll')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReplaceAll').changeable" valueExpression="feature:isReplaceAll">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReplaceAll',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="insertAt" labelExpression="aql:'Insert at'" helpExpression="aql:self.getFeatureDescription('insertAt')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('insertAt').changeable" referenceNameExpression="aql:'insertAt'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'insertAt'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'insertAt')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="structuralFeature" labelExpression="aql:'Structural feature'" helpExpression="aql:self.getFeatureDescription('structuralFeature')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('structuralFeature').changeable" referenceNameExpression="aql:'structuralFeature'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'structuralFeature'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'structuralFeature')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="addStructuralFeatureValueAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.13/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="addVariableValueAction_uml_group" domainClass="uml::AddVariableValueAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReplaceAll" labelExpression="aql:'Is replace all'" helpExpression="aql:self.getFeatureDescription('isReplaceAll')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReplaceAll').changeable" valueExpression="feature:isReplaceAll">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReplaceAll',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="insertAt" labelExpression="aql:'Insert at'" helpExpression="aql:self.getFeatureDescription('insertAt')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('insertAt').changeable" referenceNameExpression="aql:'insertAt'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'insertAt'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'insertAt')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="variable" labelExpression="aql:'Variable'" helpExpression="aql:self.getFeatureDescription('variable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('variable').changeable" referenceNameExpression="aql:'variable'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'variable'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'variable')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="addVariableValueAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.14/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="anyReceiveEvent_uml_group" domainClass="uml::AnyReceiveEvent" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="anyReceiveEvent_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.15/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="artifact_uml_group" domainClass="uml::Artifact" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="fileName" labelExpression="aql:'File name'" helpExpression="aql:self.getFeatureDescription('fileName')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:fileName">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('fileName',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="manifestation" labelExpression="aql:'Manifestation'" helpExpression="aql:self.getFeatureDescription('manifestation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('manifestation').changeable" referenceNameExpression="aql:'manifestation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'manifestation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'manifestation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedOperation" labelExpression="aql:'Owned operation'" helpExpression="aql:self.getFeatureDescription('ownedOperation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedOperation').changeable" referenceNameExpression="aql:'ownedOperation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedOperation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedOperation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="artifact_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.16/@controls.1">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="association_uml_group" domainClass="uml::Association" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="association_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.17/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="associationClass_uml_group" domainClass="uml::AssociationClass" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDerived" labelExpression="aql:'Is derived'" helpExpression="aql:self.getFeatureDescription('isDerived')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDerived').changeable" valueExpression="feature:isDerived">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDerived',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <validationSet>
          <propertyValidationRules name="associationClass_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.18/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="behavior_uml_group" domainClass="uml::Behavior" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="qualifiedName" labelExpression="aql:'Qualified name'" helpExpression="A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself." isEnabledExpression="aql:false" valueExpression="aql:self.getQualifiedName()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReentrant" labelExpression="aql:'Is reentrant'" helpExpression="aql:self.getFeatureDescription('isReentrant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReentrant').changeable" valueExpression="feature:isReentrant">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReentrant',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="behavior_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.19/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="behavioralFeature_uml_group" domainClass="uml::BehavioralFeature" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStatic" labelExpression="Is static" helpExpression="aql:self.getFeatureDescription('isStatic')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStatic').changeable" valueExpression="feature:isStatic">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStatic',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="concurrency" labelExpression="aql:'Concurrency'" helpExpression="aql:self.getFeatureDescription('concurrency')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('concurrency').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('concurrency').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.concurrency.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('concurrency').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('concurrency',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="method" labelExpression="aql:'Method'" helpExpression="aql:self.getFeatureDescription('method')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('method').changeable" referenceNameExpression="aql:'method'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'method'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'method')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameter" labelExpression="aql:'Owned parameter'" helpExpression="aql:self.getFeatureDescription('ownedParameter')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameter').changeable" referenceNameExpression="aql:'ownedParameter'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameter'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameter')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="raisedException" labelExpression="aql:'Raised Exception'" helpExpression="aql:self.getFeatureDescription('raisedException')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('raisedException').changeable" referenceNameExpression="aql:'raisedException'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'raisedException'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'raisedException')"/>
        <validationSet>
          <propertyValidationRules name="behavioralFeature_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.20/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="behaviorExcutionSpecification_uml_group" domainClass="uml::BehaviorExecutionSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="behavior" labelExpression="aql:'Behavior'" helpExpression="aql:self.getFeatureDescription('behavior')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('behavior').changeable" referenceNameExpression="aql:'behavior'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'behavior'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'behavior')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="finish" labelExpression="aql:'Finish'" helpExpression="aql:self.getFeatureDescription('finish')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('finish').changeable" referenceNameExpression="aql:'finish'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'finish'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'finish')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="start" labelExpression="aql:'Start'" helpExpression="aql:self.getFeatureDescription('start')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('start').changeable" referenceNameExpression="aql:'start'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'start'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'start')"/>
        <validationSet>
          <propertyValidationRules name="behaviorExcutionSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.21/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="broadcastSignalAction_uml_group" domainClass="uml::BroadcastSignalAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="onPort" labelExpression="aql:'On port'" helpExpression="aql:self.getFeatureDescription('onPort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('onPort').changeable" referenceNameExpression="aql:'onPort'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'onPort'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'onPort')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="signal" labelExpression="aql:'Signal'" helpExpression="aql:self.getFeatureDescription('signal')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('signal').changeable" referenceNameExpression="aql:'signal'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'signal'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'signal')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="argument" labelExpression="aql:'Argument'" helpExpression="aql:self.getFeatureDescription('argument')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('argument').changeable" referenceNameExpression="aql:'argument'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'argument'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'argument')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <validationSet>
          <propertyValidationRules name="broadcastSignalAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.22/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="callAction_uml_group" domainClass="uml::CallAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isSynchronous" labelExpression="Is synchronous" helpExpression="aql:self.getFeatureDescription('isSynchronous')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isSynchronous').changeable" valueExpression="feature:isSynchronous">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isSynchronous',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="onPort" labelExpression="aql:'On port'" helpExpression="aql:self.getFeatureDescription('onPort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('onPort').changeable" referenceNameExpression="aql:'onPort'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'onPort'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'onPort')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="argument" labelExpression="aql:'Argument'" helpExpression="aql:self.getFeatureDescription('argument')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('argument').changeable" referenceNameExpression="aql:'argument'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'argument'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'argument')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="callAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.23/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="callBehaviorAction_uml_group" domainClass="uml::CallBehaviorAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isSynchronous" labelExpression="Is synchronous" helpExpression="aql:self.getFeatureDescription('isSynchronous')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isSynchronous').changeable" valueExpression="feature:isSynchronous">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isSynchronous',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="behavior" labelExpression="aql:'Behavior'" helpExpression="aql:self.getFeatureDescription('behavior')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('behavior').changeable" referenceNameExpression="aql:'behavior'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'behavior'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'behavior')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="onPort" labelExpression="aql:'On port'" helpExpression="aql:self.getFeatureDescription('onPort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('onPort').changeable" referenceNameExpression="aql:'onPort'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'onPort'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'onPort')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="argument" labelExpression="aql:'Argument'" helpExpression="aql:self.getFeatureDescription('argument')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('argument').changeable" referenceNameExpression="aql:'argument'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'argument'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'argument')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="callBehaviorAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.24/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="callEvent_uml_group" domainClass="uml::CallEvent" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="operation" labelExpression="aql:'Operation'" helpExpression="aql:self.getFeatureDescription('operation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('operation').changeable" referenceNameExpression="aql:'operation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'operation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'operation')"/>
        <validationSet>
          <propertyValidationRules name="callEvent_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.25/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="callOperationAction_uml_group" domainClass="uml::CallOperationAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isSynchronous" labelExpression="Is synchronous" helpExpression="aql:self.getFeatureDescription('isSynchronous')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isSynchronous').changeable" valueExpression="feature:isSynchronous">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isSynchronous',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="onPort" labelExpression="aql:'On port'" helpExpression="aql:self.getFeatureDescription('onPort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('onPort').changeable" referenceNameExpression="aql:'onPort'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'onPort'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'onPort')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="operation" labelExpression="aql:'Operation'" helpExpression="aql:self.getFeatureDescription('operation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('operation').changeable" referenceNameExpression="aql:'operation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'operation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'operation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="target" labelExpression="aql:'Target'" helpExpression="aql:self.getFeatureDescription('target')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('target').changeable" referenceNameExpression="aql:'target'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'target'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'target')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="argument" labelExpression="aql:'Argument'" helpExpression="aql:self.getFeatureDescription('argument')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('argument').changeable" referenceNameExpression="aql:'argument'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'argument'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'argument')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="callOperationAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.26/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="centralBufferNode_uml_group" domainClass="uml::CentralBufferNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="centralBufferNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.27/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="changeEvent_uml_group" domainClass="uml::ChangeEvent" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="changeExpression" labelExpression="aql:'Change expression'" helpExpression="aql:self.getFeatureDescription('changeExpression')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('changeExpression').changeable" referenceNameExpression="aql:'changeExpression'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'changeExpression'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'changeExpression')"/>
        <validationSet>
          <propertyValidationRules name="changeEvent_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.28/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="class_uml_group" domainClass="uml::Class" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="qualifiedName" labelExpression="aql:'Qualified name'" helpExpression="A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself." isEnabledExpression="aql:false" valueExpression="aql:self.getQualifiedName()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedOperation" labelExpression="aql:'Owned operation'" helpExpression="aql:self.getFeatureDescription('ownedOperation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedOperation').changeable" referenceNameExpression="aql:'ownedOperation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedOperation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedOperation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedReception" labelExpression="aql:'Owned reception'" helpExpression="aql:self.getFeatureDescription('ownedReception')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedReception').changeable" referenceNameExpression="aql:'ownedReception'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedReception'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedReception')"/>
        <validationSet>
          <propertyValidationRules name="class_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.29/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="classifier_uml_group" domainClass="uml::Classifier" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="classifier_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.30/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="classifierTemplateParameter_uml_group" domainClass="uml::ClassifierTemplateParameter" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:CheckboxDescription" name="allowSubstitutable" labelExpression="aql:'Allow substitutable'" helpExpression="aql:self.getFeatureDescription('allowSubstitutable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('allowSubstitutable').changeable" valueExpression="feature:allowSubstitutable">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('allowSubstitutable',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="default" labelExpression="aql:'Default'" helpExpression="aql:self.getFeatureDescription('default')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('default').changeable" referenceNameExpression="aql:'default'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'default'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'default')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedDefault" labelExpression="aql:'Owned default'" helpExpression="aql:self.getFeatureDescription('ownedDefault')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedDefault').changeable" referenceNameExpression="aql:'ownedDefault'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedDefault'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedDefault')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameteredElement" labelExpression="aql:'Owned parametered element'" helpExpression="aql:self.getFeatureDescription('ownedParameteredElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameteredElement').changeable" referenceNameExpression="aql:'ownedParameteredElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameteredElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameteredElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="parameteredElement" labelExpression="aql:'Parametered element'" helpExpression="aql:self.getFeatureDescription('parameteredElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('parameteredElement').changeable" referenceNameExpression="aql:'parameteredElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'parameteredElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'parameteredElement')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="clause_uml_group" domainClass="uml::Clause" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="decider" labelExpression="aql:'Decider'" helpExpression="aql:self.getFeatureDescription('decider')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('decider').changeable" referenceNameExpression="aql:'decider'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'decider'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'decider')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="body" labelExpression="aql:'Body'" helpExpression="aql:self.getFeatureDescription('body')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('body').changeable" referenceNameExpression="aql:'body'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'body'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'body')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="bodyOutput" labelExpression="aql:'Body output'" helpExpression="aql:self.getFeatureDescription('bodyOutput')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('bodyOutput').changeable" referenceNameExpression="aql:'bodyOutput'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'bodyOutput'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'bodyOutput')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="predecessorClause" labelExpression="aql:'Predecessor clause'" helpExpression="aql:self.getFeatureDescription('predecessorClause')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('predecessorClause').changeable" referenceNameExpression="aql:'predecessorClause'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'predecessorClause'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'predecessorClause')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="successorClause" labelExpression="aql:'Successor clause'" helpExpression="aql:self.getFeatureDescription('successorClause')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('successorClause').changeable" referenceNameExpression="aql:'successorClause'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'successorClause'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'successorClause')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="test" labelExpression="aql:'Test'" helpExpression="aql:self.getFeatureDescription('test')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('test').changeable" referenceNameExpression="aql:'test'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'test'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'test')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="clearAssociationAction_uml_group" domainClass="uml::ClearAssociationAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="association" labelExpression="aql:'Association'" helpExpression="aql:self.getFeatureDescription('association')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('association').changeable" referenceNameExpression="aql:'association'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'association'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'association')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="clearAssociationAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.33/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="clearStructuralFeatureAction_uml_group" domainClass="uml::ClearStructuralFeatureAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="structuralFeature" labelExpression="aql:'Structural feature'" helpExpression="aql:self.getFeatureDescription('structuralFeature')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('structuralFeature').changeable" referenceNameExpression="aql:'structuralFeature'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'structuralFeature'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'structuralFeature')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="clearStructuralFeatureAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.34/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="clearVariableAction_uml_group" domainClass="uml::ClearVariableAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="variable" labelExpression="aql:'Variable'" helpExpression="aql:self.getFeatureDescription('variable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('variable').changeable" referenceNameExpression="aql:'variable'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'variable'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'variable')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="clearVariableAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.35/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="collaboration_uml_group" domainClass="uml::Collaboration" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="collaborationRole" labelExpression="aql:'Collaboration role'" helpExpression="aql:self.getFeatureDescription('collaborationRole')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('collaborationRole').changeable" referenceNameExpression="aql:'collaborationRole'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'collaborationRole'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'collaborationRole')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <validationSet>
          <propertyValidationRules name="collaboration_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.36/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="collaborationUse_uml_group" domainClass="uml::CollaborationUse" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="roleBinding" labelExpression="aql:'Role binding'" helpExpression="aql:self.getFeatureDescription('roleBinding')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('roleBinding').changeable" referenceNameExpression="aql:'roleBinding'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'roleBinding'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'roleBinding')"/>
        <validationSet>
          <propertyValidationRules name="collaborationUse_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.37/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="combinedFragment_uml_group" domainClass="uml::CombinedFragment" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="interactionOperator" labelExpression="aql:'Interaction operator'" helpExpression="aql:self.getFeatureDescription('interactionOperator')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('interactionOperator').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('interactionOperator').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.interactionOperator.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('interactionOperator').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('interactionOperator',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="covered" labelExpression="aql:'Covered'" helpExpression="aql:self.getFeatureDescription('covered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('covered').changeable" referenceNameExpression="aql:'covered'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'covered'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'covered')"/>
        <validationSet>
          <propertyValidationRules name="combinedFragment_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.38/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="comment_uml_group" domainClass="uml::Comment" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextAreaDescription" name="body" labelExpression="aql:'Body'" helpExpression="aql:self.getFeatureDescription('body')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('body').changeable" lineCount="3" valueExpression="feature:body">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('body',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="annotatedElement" labelExpression="aql:'Annotated element'" helpExpression="aql:self.getFeatureDescription('annotatedElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('annotatedElement').changeable" referenceNameExpression="aql:'annotatedElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'annotatedElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'annotatedElement')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="communicationPath_uml_group" domainClass="uml::CommunicationPath" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDerived" labelExpression="aql:'Is derived'" helpExpression="aql:self.getFeatureDescription('isDerived')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDerived').changeable" valueExpression="feature:isDerived">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDerived',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="memberEnd" labelExpression="aql:'Member end'" helpExpression="aql:self.getFeatureDescription('memberEnd')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('memberEnd').changeable" referenceNameExpression="aql:'memberEnd'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'memberEnd'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'memberEnd')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="navigableOwnedEnd" labelExpression="aql:'Navigable owned end'" helpExpression="aql:self.getFeatureDescription('navigableOwnedEnd')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('navigableOwnedEnd').changeable" referenceNameExpression="aql:'navigableOwnedEnd'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'navigableOwnedEnd'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'navigableOwnedEnd')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedEnd" labelExpression="aql:'Owned end'" helpExpression="aql:self.getFeatureDescription('ownedEnd')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedEnd').changeable" referenceNameExpression="aql:'ownedEnd'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedEnd'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedEnd')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="communicationPath_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.40/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="component_uml_group" domainClass="uml::Component" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isIndirectlyInstantiated" labelExpression="aql:'Is indirectly instantiated'" helpExpression="aql:self.getFeatureDescription('isIndirectlyInstantiated')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isIndirectlyInstantiated').changeable" valueExpression="feature:isIndirectlyInstantiated">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isIndirectlyInstantiated',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="provided" labelExpression="aql:'Provided'" helpExpression="aql:self.getFeatureDescription('provided')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('provided').changeable" referenceNameExpression="aql:'provided'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'provided'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'provided')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="required" labelExpression="aql:'Required'" helpExpression="aql:self.getFeatureDescription('required')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('required').changeable" referenceNameExpression="aql:'required'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'required'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'required')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="component_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.41/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="componentRealization_uml_group" domainClass="uml::ComponentRealization" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="mapping" labelExpression="aql:'Mapping'" helpExpression="aql:self.getFeatureDescription('mapping')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mapping').changeable" referenceNameExpression="aql:'mapping'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'mapping'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'mapping')"/>
        <validationSet>
          <propertyValidationRules name="componentRealization_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.42/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="conditionalNode_uml_group" domainClass="uml::ConditionalNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAssured" labelExpression="aql:'Is assured'" helpExpression="aql:self.getFeatureDescription('isAssured')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAssured').changeable" valueExpression="feature:isAssured">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAssured',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDeterminate" labelExpression="aql:'Is determinate'" helpExpression="aql:self.getFeatureDescription('isDeterminate')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDeterminate').changeable" valueExpression="feature:isDeterminate">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDeterminate',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="mustIsolate" labelExpression="aql:'Must isolate'" helpExpression="aql:self.getFeatureDescription('mustIsolate')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mustIsolate').changeable" valueExpression="feature:mustIsolate">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('mustIsolate',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="clause" labelExpression="aql:'Clause'" helpExpression="aql:self.getFeatureDescription('clause')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('clause').changeable" referenceNameExpression="aql:'clause'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'clause'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'clause')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="conditionalNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.43/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="connectableElement_uml_group" domainClass="uml::ConnectableElement" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="connectableElement_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.44/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="connectableElementTemplateParameter_uml_group" domainClass="uml::ConnectableElementTemplateParameter" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="default" labelExpression="aql:'Default'" helpExpression="aql:self.getFeatureDescription('default')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('default').changeable" referenceNameExpression="aql:'default'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'default'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'default')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedDefault" labelExpression="aql:'Owned default'" helpExpression="aql:self.getFeatureDescription('ownedDefault')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedDefault').changeable" referenceNameExpression="aql:'ownedDefault'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedDefault'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedDefault')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameteredElement" labelExpression="aql:'Owned parametered element'" helpExpression="aql:self.getFeatureDescription('ownedParameteredElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameteredElement').changeable" referenceNameExpression="aql:'ownedParameteredElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameteredElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameteredElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="parameteredElement" labelExpression="aql:'Parametered element'" helpExpression="aql:self.getFeatureDescription('parameteredElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('parameteredElement').changeable" referenceNameExpression="aql:'parameteredElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'parameteredElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'parameteredElement')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="connectionPointReference_uml_group" domainClass="uml::ConnectionPointReference" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="connectionPointReference_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.46/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="connector_uml_group" domainClass="uml::Connector" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStatic" labelExpression="Is static" helpExpression="aql:self.getFeatureDescription('isStatic')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStatic').changeable" valueExpression="feature:isStatic">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStatic',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="kind" labelExpression="aql:'Kind'" helpExpression="aql:self.getFeatureDescription('kind')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('kind').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('kind').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.kind.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('kind').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('kind',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="connector_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.47/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="connectorEnd_uml_group" domainClass="uml::ConnectorEnd" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="role" labelExpression="aql:'Role'" helpExpression="aql:self.getFeatureDescription('role')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('role').changeable" referenceNameExpression="aql:'role'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'role'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'role')"/>
        <validationSet>
          <propertyValidationRules name="connectorEnd_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.48/@controls.2">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="considerIgnoreFragment_uml_group" domainClass="uml::ConsiderIgnoreFragment" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="interactionOperator" labelExpression="aql:'Interaction operator'" helpExpression="aql:self.getFeatureDescription('interactionOperator')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('interactionOperator').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('interactionOperator').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.interactionOperator.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('interactionOperator').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('interactionOperator',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="considerIgnoreFragment_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.49/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="constraint_uml_group" domainClass="uml::Constraint" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="context" labelExpression="aql:'Context'" helpExpression="aql:self.getFeatureDescription('context')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('context').changeable" referenceNameExpression="aql:'context'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'context'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'context')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="constrainedElement" labelExpression="aql:'Constrained element'" helpExpression="aql:self.getFeatureDescription('constrainedElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('constrainedElement').changeable" referenceNameExpression="aql:'constrainedElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'constrainedElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'constrainedElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <validationSet>
          <propertyValidationRules name="constraint_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.50/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="continuation_uml_group" domainClass="uml::Continuation" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="setting" labelExpression="aql:'Setting'" helpExpression="aql:self.getFeatureDescription('setting')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('setting').changeable" valueExpression="feature:setting">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('setting',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="continuation_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.51/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="controlFlow_uml_group" domainClass="uml::ControlFlow" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="guard" labelExpression="aql:'Guard'" helpExpression="aql:self.getFeatureDescription('guard')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('guard').changeable" referenceNameExpression="aql:'guard'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'guard'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'guard')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="weight" labelExpression="aql:'Weight'" helpExpression="aql:self.getFeatureDescription('weight')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('weight').changeable" referenceNameExpression="aql:'weight'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'weight'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'weight')"/>
        <validationSet>
          <propertyValidationRules name="controlFlow_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.52/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="controlNode_uml_group" domainClass="uml::ControlNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="controlNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.53/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="createLinkAction_uml_group" domainClass="uml::CreateLinkAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="endData" labelExpression="aql:'End data'" helpExpression="aql:self.getFeatureDescription('endData')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('endData').changeable" referenceNameExpression="aql:'endData'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'endData'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'endData')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inputValue" labelExpression="aql:'Input value'" helpExpression="aql:self.getFeatureDescription('inputValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inputValue').changeable" referenceNameExpression="aql:'inputValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inputValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inputValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <validationSet>
          <propertyValidationRules name="createLinkAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.54/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="createLinkObjectAction_uml_group" domainClass="uml::CreateLinkObjectAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="endData" labelExpression="aql:'End data'" helpExpression="aql:self.getFeatureDescription('endData')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('endData').changeable" referenceNameExpression="aql:'endData'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'endData'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'endData')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inputValue" labelExpression="aql:'Input value'" helpExpression="aql:self.getFeatureDescription('inputValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inputValue').changeable" referenceNameExpression="aql:'inputValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inputValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inputValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="createLinkObjectAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.55/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="createObjectAction_uml_group" domainClass="uml::CreateObjectAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="classifier" labelExpression="aql:'Classifier'" helpExpression="aql:self.getFeatureDescription('classifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('classifier').changeable" referenceNameExpression="aql:'classifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'classifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'classifier')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="createObjectAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.56/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="dataStoreNode_uml_group" domainClass="uml::DataStoreNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="dataStoreNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.57/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="dataType_uml_group" domainClass="uml::DataType" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <validationSet>
          <propertyValidationRules name="dataType_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.58/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="decisionNode_uml_group" domainClass="uml::DecisionNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="decisionInput" labelExpression="aql:'Decision input'" helpExpression="aql:self.getFeatureDescription('decisionInput')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('decisionInput').changeable" referenceNameExpression="aql:'decisionInput'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'decisionInput'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'decisionInput')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="decisionInputFlow" labelExpression="aql:'Decision input flow'" helpExpression="aql:self.getFeatureDescription('decisionInputFlow')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('decisionInputFlow').changeable" referenceNameExpression="aql:'decisionInputFlow'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'decisionInputFlow'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'decisionInputFlow')"/>
        <validationSet>
          <propertyValidationRules name="decisionNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.59/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="dependency_uml_group" domainClass="uml::Dependency" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="dependency_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.60/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="deployedArtifact_uml_group" domainClass="uml::DeployedArtifact" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="deployedArtifact_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.61/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="deployment_uml_group" domainClass="uml::Deployment" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="configuration" labelExpression="aql:'Configuration'" helpExpression="aql:self.getFeatureDescription('configuration')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('configuration').changeable" referenceNameExpression="aql:'configuration'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'configuration'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'configuration')"/>
        <validationSet>
          <propertyValidationRules name="deployment_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.62/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="deploymentSpecification_uml_group" domainClass="uml::DeploymentSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="deploymentLocation" labelExpression="aql:'Deployment location'" helpExpression="aql:self.getFeatureDescription('deploymentLocation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('deploymentLocation').changeable" valueExpression="feature:deploymentLocation">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('deploymentLocation',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="executionLocation" labelExpression="aql:'Execution location'" helpExpression="aql:self.getFeatureDescription('executionLocation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('executionLocation').changeable" valueExpression="feature:executionLocation">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('executionLocation',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="fileName" labelExpression="aql:'File name'" helpExpression="aql:self.getFeatureDescription('fileName')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('fileName').changeable" valueExpression="feature:fileName">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('fileName',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="manifestation" labelExpression="aql:'Manifestation'" helpExpression="aql:self.getFeatureDescription('manifestation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('manifestation').changeable" referenceNameExpression="aql:'manifestation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'manifestation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'manifestation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedOperation" labelExpression="aql:'Owned operation'" helpExpression="aql:self.getFeatureDescription('ownedOperation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedOperation').changeable" referenceNameExpression="aql:'ownedOperation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedOperation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedOperation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="deploymentSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.63/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="deploymentTarget_uml_group" domainClass="uml::DeploymentTarget" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="deploymentTarget_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.64/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="device_uml_group" domainClass="uml::Device" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="device_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.65/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="destroyLinkAction_uml_group" domainClass="uml::DestroyLinkAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="endData" labelExpression="aql:'End data'" helpExpression="aql:self.getFeatureDescription('endData')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('endData').changeable" referenceNameExpression="aql:'endData'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'endData'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'endData')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inputValue" labelExpression="aql:'Input value'" helpExpression="aql:self.getFeatureDescription('inputValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inputValue').changeable" referenceNameExpression="aql:'inputValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inputValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inputValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <validationSet>
          <propertyValidationRules name="destroyLinkAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.66/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="destroyObjectAction_uml_group" domainClass="uml::DestroyObjectAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDestroyLinks" labelExpression="aql:'Is destroy links'" helpExpression="aql:self.getFeatureDescription('isDestroyLinks')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDestroyLinks').changeable" valueExpression="feature:isDestroyLinks">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDestroyLinks',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDestroyOwnedObjects" labelExpression="aql:'Is destroy owned objects'" helpExpression="aql:self.getFeatureDescription('isDestroyOwnedObjects')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDestroyOwnedObjects').changeable" valueExpression="feature:isDestroyOwnedObjects">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDestroyOwnedObjects',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="target" labelExpression="aql:'Target'" helpExpression="aql:self.getFeatureDescription('target')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('target').changeable" referenceNameExpression="aql:'target'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'target'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'target')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="destroyObjectAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.67/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="duration_uml_group" domainClass="uml::Duration" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="expr" labelExpression="aql:'Expr'" helpExpression="aql:self.getFeatureDescription('expr')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('expr').changeable" referenceNameExpression="aql:'expr'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'expr'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'expr')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="observation" labelExpression="aql:'Observation'" helpExpression="aql:self.getFeatureDescription('observation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('observation').changeable" referenceNameExpression="aql:'observation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'observation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'observation')"/>
        <validationSet>
          <propertyValidationRules name="duration_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.68/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="durationConstraint_uml_group" domainClass="uml::DurationConstraint" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="context" labelExpression="aql:'Context'" helpExpression="aql:self.getFeatureDescription('context')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('context').changeable" referenceNameExpression="aql:'context'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'context'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'context')"/>
        <controls xsi:type="properties:ListDescription" name="firstEvent" labelExpression="First event" helpExpression="aql:self.getFeatureDescription('firstEvent')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('firstEvent').changeable" valueExpression="feature:firstEvent" displayExpression="aql:value.toString()"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="constrainedElement" labelExpression="aql:'Constrained element'" helpExpression="aql:self.getFeatureDescription('constrainedElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('constrainedElement').changeable" referenceNameExpression="aql:'constrainedElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'constrainedElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'constrainedElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <validationSet>
          <propertyValidationRules name="durationConstraint_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.69/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="durationInterval_uml_group" domainClass="uml::DurationInterval" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="min" labelExpression="aql:'Min'" helpExpression="aql:self.getFeatureDescription('min')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('min').changeable" referenceNameExpression="aql:'min'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'min'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'min')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="max" labelExpression="aql:'Max'" helpExpression="aql:self.getFeatureDescription('max')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('max').changeable" referenceNameExpression="aql:'max'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'max'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'max')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="durationInterval_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.70/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="durationObservation_uml_group" domainClass="uml::DurationObservation" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ListDescription" name="firstEvent" labelExpression="First event" helpExpression="aql:self.getFeatureDescription('firstEvent')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('firstEvent').changeable" valueExpression="feature:firstEvent" displayExpression="aql:value.toString()"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="event" labelExpression="aql:'Event'" helpExpression="aql:self.getFeatureDescription('event')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('event').changeable" referenceNameExpression="aql:'event'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'event'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'event')"/>
        <validationSet>
          <propertyValidationRules name="durationObservation_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.71/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="elementImport_uml_group" domainClass="uml::ElementImport" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="alias" labelExpression="aql:'Alias'" helpExpression="aql:self.getFeatureDescription('alias')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('alias').changeable" valueExpression="feature:alias">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('alias',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="importedElement" labelExpression="aql:'Imported element'" helpExpression="aql:self.getFeatureDescription('importedElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('importedElement').changeable" referenceNameExpression="aql:'importedElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'importedElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'importedElement')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="enumeration_uml_group" domainClass="uml::Enumeration" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedLiteral" labelExpression="aql:'Owned literal'" helpExpression="aql:self.getFeatureDescription('ownedLiteral')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedLiteral').changeable" referenceNameExpression="aql:'ownedLiteral'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedLiteral'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedLiteral')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="enumeration_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.73/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="enumerationLiteral_uml_group" domainClass="uml::EnumerationLiteral" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <validationSet>
          <propertyValidationRules name="enumerationLiteral_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.74/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="event_uml_group" domainClass="uml::Event" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="event_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.75/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="exceptionHandler_uml_group" domainClass="uml::ExceptionHandler" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="exceptionInput" labelExpression="aql:'Exception Input'" helpExpression="aql:self.getFeatureDescription('exceptionInput')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('exceptionInput').changeable" referenceNameExpression="aql:'exceptionInput'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'exceptionInput'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'exceptionInput')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handlerBody" labelExpression="aql:'Handler body'" helpExpression="aql:self.getFeatureDescription('handlerBody')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handlerBody').changeable" referenceNameExpression="aql:'handlerBody'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handlerBody'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handlerBody')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="exceptionType" labelExpression="aql:'Exception type'" helpExpression="aql:self.getFeatureDescription('exceptionType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('exceptionType').changeable" referenceNameExpression="aql:'exceptionType'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'exceptionType'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'exceptionType')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="executableNode_uml_group" domainClass="uml::ExecutableNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="executableNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.77/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="executionEnvironment_uml_group" domainClass="uml::ExecutionEnvironment" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="executionEnvironment_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.78/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="executionOccurrenceSpecification_uml_group" domainClass="uml::ExecutionOccurrenceSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="execution" labelExpression="aql:'Execution'" helpExpression="aql:self.getFeatureDescription('execution')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('execution').changeable" referenceNameExpression="aql:'execution'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'execution'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'execution')"/>
        <validationSet>
          <propertyValidationRules name="executionOccurrenceSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.79/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="executionSpecification_uml_group" domainClass="uml::ExecutionSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="finish" labelExpression="aql:'Finish'" helpExpression="aql:self.getFeatureDescription('finish')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('finish').changeable" referenceNameExpression="aql:'finish'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'finish'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'finish')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="start" labelExpression="aql:'Start'" helpExpression="aql:self.getFeatureDescription('start')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('start').changeable" referenceNameExpression="aql:'start'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'start'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'start')"/>
        <validationSet>
          <propertyValidationRules name="excutionSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.80/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="expansionNode_uml_group" domainClass="uml::ExpansionNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="regionAsInput" labelExpression="aql:'Region as input'" helpExpression="aql:self.getFeatureDescription('regionAsInput')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('regionAsInput').changeable" referenceNameExpression="aql:'regionAsInput'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'regionAsInput'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'regionAsInput')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="regionAsOutput" labelExpression="aql:'Region as output'" helpExpression="aql:self.getFeatureDescription('regionAsOutput')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('regionAsOutput').changeable" referenceNameExpression="aql:'regionAsOutput'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'regionAsOutput'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'regionAsOutput')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="expansionNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.81/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="expansionRegion_uml_group" domainClass="uml::ExpansionRegion" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="mustIsolate" labelExpression="aql:'Must isolate'" helpExpression="aql:self.getFeatureDescription('mustIsolate')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mustIsolate').changeable" valueExpression="feature:mustIsolate">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('mustIsolate',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="mode" labelExpression="aql:'Mode'" helpExpression="aql:self.getFeatureDescription('mode')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mode').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('mode').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.mode.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('mode').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('mode',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inputElement" labelExpression="aql:'Input element'" helpExpression="aql:self.getFeatureDescription('inputElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inputElement').changeable" referenceNameExpression="aql:'inputElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inputElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inputElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="outputElement" labelExpression="aql:'Output element'" helpExpression="aql:self.getFeatureDescription('outputElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('outputElement').changeable" referenceNameExpression="aql:'outputElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'outputElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'outputElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="expansionRegion_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.82/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="expression_uml_group" domainClass="uml::Expression" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="symbol" labelExpression="aql:'Symbol'" helpExpression="aql:self.getFeatureDescription('symbol')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('symbol').changeable" valueExpression="feature:symbol">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('symbol',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="operand" labelExpression="aql:'Operand'" helpExpression="aql:self.getFeatureDescription('operand')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('operand').changeable" referenceNameExpression="aql:'operand'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'operand'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'operand')"/>
        <validationSet>
          <propertyValidationRules name="expression_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.83/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="extend_uml_group" domainClass="uml::Extend" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="extend_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.84/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="extension_uml_group" domainClass="uml::Extension" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isRequired" labelExpression="Is required" helpExpression="aql:self.getFeatureDescription('isRequired')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isRequired').changeable" valueExpression="feature:isRequired">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isRequired',newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="extension_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.85/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="extensionPoint_uml_group" domainClass="uml::ExtensionPoint" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="extensionPoint_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.86/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="extensionEnd_uml_group" domainClass="uml::ExtensionEnd" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDerived" labelExpression="aql:'Is derived'" helpExpression="aql:self.getFeatureDescription('isDerived')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDerived').changeable" valueExpression="feature:isDerived">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDerived',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDerivedUnion" labelExpression="aql:'Is derived union'" helpExpression="aql:self.getFeatureDescription('isDerivedUnion')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDerivedUnion').changeable" valueExpression="feature:isDerivedUnion">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDerivedUnion',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReadOnly" labelExpression="aql:'Is read only'" helpExpression="aql:self.getFeatureDescription('isReadOnly')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReadOnly').changeable" valueExpression="feature:isReadOnly">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReadOnly',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStatic" labelExpression="aql:'Is static'" helpExpression="aql:self.getFeatureDescription('isStatic')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStatic').changeable" valueExpression="feature:isStatic">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStatic',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="aggregation" labelExpression="aql:'Aggregation'" helpExpression="aql:self.getFeatureDescription('aggregation')" isEnabledExpression="aql:false" valueExpression="aql:self.eClass().getEStructuralFeature('aggregation').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.aggregation.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('aggregation').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('aggregation',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="defaultValue" labelExpression="aql:'Default value'" helpExpression="aql:self.getFeatureDescription('defaultValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('defaultValue').changeable" referenceNameExpression="aql:'defaultValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'defaultValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'defaultValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="subsettedProperty" labelExpression="aql:'Subsetted property'" helpExpression="aql:self.getFeatureDescription('subsettedProperty')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('subsettedProperty').changeable" referenceNameExpression="aql:'subsettedProperty'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'subsettedProperty'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'subsettedProperty')"/>
        <validationSet>
          <propertyValidationRules name="extensionEnd_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.87/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="extensionEnd_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.87/@controls.11">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="feature_uml_group" domainClass="uml::Feature" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStatic" labelExpression="Is static" helpExpression="aql:self.getFeatureDescription('isStatic')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStatic').changeable" valueExpression="feature:isStatic">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStatic',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="feature_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.88/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="finalNode_uml_group" domainClass="uml::FinalNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="finalNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.89/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="finalState_uml_group" domainClass="uml::FinalState" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="stateInvariant" labelExpression="aql:'State invariant'" helpExpression="aql:self.getFeatureDescription('stateInvariant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('stateInvariant').changeable" referenceNameExpression="aql:'stateInvariant'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'stateInvariant'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'stateInvariant')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="entry" labelExpression="aql:'Entry'" helpExpression="aql:self.getFeatureDescription('entry')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('entry').changeable" referenceNameExpression="aql:'entry'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'entry'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'entry')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="doActivity" labelExpression="aql:'Do activity'" helpExpression="aql:self.getFeatureDescription('doActivity')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('doActivity').changeable" referenceNameExpression="aql:'doActivity'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'doActivity'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'doActivity')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="exit" labelExpression="aql:'Exit'" helpExpression="aql:self.getFeatureDescription('exit')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('exit').changeable" referenceNameExpression="aql:'exit'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'exit'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'exit')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="deferrableTrigger" labelExpression="aql:'Deferrable trigger'" helpExpression="aql:self.getFeatureDescription('deferrableTrigger')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('deferrableTrigger').changeable" referenceNameExpression="aql:'deferrableTrigger'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'deferrableTrigger'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'deferrableTrigger')"/>
        <validationSet>
          <propertyValidationRules name="finalState_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.90/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="functionBehavior_uml_group" domainClass="uml::FunctionBehavior" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReentrant" labelExpression="aql:'Is reentrant'" helpExpression="aql:self.getFeatureDescription('isReentrant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReentrant').changeable" valueExpression="feature:isReentrant">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReentrant',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:LanguageExpressionDescription" name="language" labelExpression="aql:'Language'" helpExpression="aql:self.getFeatureDescription('language')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('language').changeable"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="functionBehavior_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.91/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="gate_uml_group" domainClass="uml::Gate" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="gate_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.92/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="generalOrdering_uml_group" domainClass="uml::GeneralOrdering" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="before" labelExpression="aql:'Before'" helpExpression="aql:self.getFeatureDescription('before')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('before').changeable" referenceNameExpression="aql:'before'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'before'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'before')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="after" labelExpression="aql:'After'" helpExpression="aql:self.getFeatureDescription('after')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('after').changeable" referenceNameExpression="aql:'after'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'after'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'after')"/>
        <validationSet>
          <propertyValidationRules name="generalOrdering_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.93/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="generalization_uml_group" domainClass="uml::Generalization" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:CheckboxDescription" name="isSubstitutable" labelExpression="Is substitutable" helpExpression="aql:self.getFeatureDescription('isSubstitutable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isSubstitutable').changeable" valueExpression="feature:isSubstitutable">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isSubstitutable',newValue)"/>
          </initialOperation>
        </controls>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="generalizationSet_uml_group" domainClass="uml::GeneralizationSet" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isCovering" labelExpression="Is covering" helpExpression="aql:self.getFeatureDescription('isCovering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isCovering').changeable" valueExpression="feature:isCovering">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isCovering',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDisjoint" labelExpression="Is disjoint" helpExpression="aql:self.getFeatureDescription('isDisjoint')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDisjoint').changeable" valueExpression="feature:isDisjoint">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDisjoint',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="powerType" labelExpression="aql:'Powertype'" helpExpression="aql:self.getFeatureDescription('powertype')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('powertype').changeable" referenceNameExpression="aql:'powertype'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'powertype'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'powertype')"/>
        <validationSet>
          <propertyValidationRules name="generalizationSet_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.95/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="image_uml_group" domainClass="uml::Image" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:'The image\'s name. This is a virtual property, used only for label display.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="aql:self.getImageName()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Image).setImageName(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="kind" labelExpression="aql:'Kind'" helpExpression="aql:'The kind of image to be used. If icon is set, the image will be displayed on the stereotyped element. If shape is used, the image will be used as the graphical element. '" valueExpression="aql:self.getImageKind()" candidatesExpression="aql:self.getImageKindEnumerations()" candidateDisplayExpression="aql:candidate.toString()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Image).setImageKind(newValue.oclAsType(ecore::EString))"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="expression" labelExpression="aql:'Expression'" helpExpression="aql:'A boolean expression to determine under which condition this image should be displayed.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('expression').changeable" valueExpression="aql:self.getImageExpression()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Image).setImageExpression(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="location" labelExpression="aql:'Location'" helpExpression="aql:self.getFeatureDescription('location')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('location').changeable" valueExpression="feature:location">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('location',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="format" labelExpression="aql:'Format'" helpExpression="aql:self.getFeatureDescription('format')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('format').changeable" valueExpression="feature:format">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('format',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="content" labelExpression="aql:'Content'" helpExpression="aql:self.getFeatureDescription('content')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('content').changeable" valueExpression="feature:content">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('content',newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="image_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.96/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="include_uml_group" domainClass="uml::Include" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="include_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.97/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="informationFlow_uml_group" domainClass="uml::InformationFlow" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="conveyed" labelExpression="aql:'Conveyed'" helpExpression="aql:self.getFeatureDescription('conveyed')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('conveyed').changeable" referenceNameExpression="aql:'conveyed'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'conveyed'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'conveyed')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="realization" labelExpression="aql:'Realization'" helpExpression="aql:self.getFeatureDescription('realization')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('realization').changeable" referenceNameExpression="aql:'realization'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'realization'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'realization')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="realizingActivityEdge" labelExpression="aql:'Realizing activity edge'" helpExpression="aql:self.getFeatureDescription('realizingActivityEdge')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('realizingActivityEdge').changeable" referenceNameExpression="aql:'realizingActivityEdge'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'realizingActivityEdge'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'realizingActivityEdge')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="realizingConnector" labelExpression="aql:'Realizing connector'" helpExpression="aql:self.getFeatureDescription('realizingConnector')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('realizingConnector').changeable" referenceNameExpression="aql:'realizingConnector'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'realizingConnector'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'realizingConnector')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="realizingMessage" labelExpression="aql:'Realizing message'" helpExpression="aql:self.getFeatureDescription('realizingMessage')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('realizingMessage').changeable" referenceNameExpression="aql:'realizingMessage'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'realizingMessage'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'realizingMessage')"/>
        <validationSet>
          <propertyValidationRules name="informationFlow_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.98/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="informationItem_uml_group" domainClass="uml::InformationItem" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="represented" labelExpression="aql:'Represented'" helpExpression="aql:self.getFeatureDescription('represented')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('represented').changeable" referenceNameExpression="aql:'represented'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'represented'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'represented')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="informationItem_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.99/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="initialNode_uml_group" domainClass="uml::InitialNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="initialNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.100/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="inputPin_uml_group" domainClass="uml::InputPin" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControl" labelExpression="aql:'Is control'" helpExpression="aql:self.getFeatureDescription('isControl')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControl').changeable" valueExpression="feature:isControl">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControl',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="inputPin_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.101/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="inputPin_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.101/@controls.10">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="instanceSpecification_uml_group" domainClass="uml::InstanceSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="classifier" labelExpression="aql:'Classifier'" helpExpression="aql:self.getFeatureDescription('classifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('classifier').changeable" referenceNameExpression="aql:'classifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'classifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'classifier')"/>
        <validationSet>
          <propertyValidationRules name="instanceSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.102/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="instanceValue_uml_group" domainClass="uml::InstanceValue" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="instance" labelExpression="aql:'Instance'" helpExpression="aql:self.getFeatureDescription('instance')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('instance').changeable" referenceNameExpression="aql:'instance'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'instance'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'instance')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="instanceValue_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.103/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interaction_uml_group" domainClass="uml::Interaction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReentrant" labelExpression="aql:'Is reentrant'" helpExpression="aql:self.getFeatureDescription('isReentrant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReentrant').changeable" valueExpression="feature:isReentrant">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReentrant',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="precondition" labelExpression="aql:'Precondition'" helpExpression="aql:self.getFeatureDescription('precondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('precondition').changeable" referenceNameExpression="aql:'precondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'precondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'precondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="postcondition" labelExpression="aql:'Postcondition'" helpExpression="aql:self.getFeatureDescription('postcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('postcondition').changeable" referenceNameExpression="aql:'postcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'postcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'postcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="interaction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.104/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interactionConstraint_uml_group" domainClass="uml::InteractionConstraint" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="context" labelExpression="aql:'Context'" helpExpression="aql:self.getFeatureDescription('context')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('context').changeable" referenceNameExpression="aql:'context'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'context'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'context')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="maxint" labelExpression="aql:'Maxint'" helpExpression="aql:self.getFeatureDescription('maxint')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('maxint').changeable" referenceNameExpression="aql:'maxint'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'maxint'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'maxint')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="minint" labelExpression="aql:'Minint'" helpExpression="aql:self.getFeatureDescription('minint')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('minint').changeable" referenceNameExpression="aql:'minint'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'minint'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'minint')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="constrainedElement" labelExpression="aql:'Constrained element'" helpExpression="aql:self.getFeatureDescription('constrainedElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('constrainedElement').changeable" referenceNameExpression="aql:'constrainedElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'constrainedElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'constrainedElement')"/>
        <validationSet>
          <propertyValidationRules name="interactionConstraint_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.105/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interactionFragment_uml_group" domainClass="uml::InteractionFragment" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="interactionFragment_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.106/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interactionOperand_uml_group" domainClass="uml::InteractionOperand" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="guard" labelExpression="aql:'Guard'" helpExpression="aql:self.getFeatureDescription('guard')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('guard').changeable" referenceNameExpression="aql:'guard'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'guard'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'guard')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="covered" labelExpression="aql:'Covered'" helpExpression="aql:self.getFeatureDescription('covered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('covered').changeable" referenceNameExpression="aql:'covered'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'covered'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'covered')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="fragment" labelExpression="aql:'Fragment'" helpExpression="aql:self.getFeatureDescription('fragment')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('fragment').changeable" referenceNameExpression="aql:'fragment'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'fragment'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'fragment')"/>
        <validationSet>
          <propertyValidationRules name="interactionOperand_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.107/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interactionUse_uml_group" domainClass="uml::InteractionUse" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="refersTo" labelExpression="aql:'Refers to'" helpExpression="aql:self.getFeatureDescription('refersTo')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('refersTo').changeable" referenceNameExpression="aql:'refersTo'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'refersTo'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'refersTo')"/>
        <validationSet>
          <propertyValidationRules name="interactionUse_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.108/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interface_uml_group" domainClass="uml::Interface" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="protocol" labelExpression="aql:'Protocol'" helpExpression="aql:self.getFeatureDescription('protocol')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('protocol').changeable" referenceNameExpression="aql:'protocol'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'protocol'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'protocol')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedOperation" labelExpression="aql:'Owned operation'" helpExpression="aql:self.getFeatureDescription('ownedOperation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedOperation').changeable" referenceNameExpression="aql:'ownedOperation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedOperation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedOperation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedReception" labelExpression="aql:'Owned reception'" helpExpression="aql:self.getFeatureDescription('ownedReception')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedReception').changeable" referenceNameExpression="aql:'ownedReception'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedReception'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedReception')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <validationSet>
          <propertyValidationRules name="interface_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.109/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interfaceRealization_uml_group" domainClass="uml::InterfaceRealization" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="mapping" labelExpression="aql:'Mapping'" helpExpression="aql:self.getFeatureDescription('mapping')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mapping').changeable" referenceNameExpression="aql:'mapping'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'mapping'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'mapping')"/>
        <validationSet>
          <propertyValidationRules name="interfaceRealization_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.110/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interruptibleActivityRegion_uml_group" domainClass="uml::InterruptibleActivityRegion" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="interruptingEdge" labelExpression="aql:'Interrupting edge'" helpExpression="aql:self.getFeatureDescription('interruptingEdge')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('interruptingEdge').changeable" referenceNameExpression="aql:'interruptingEdge'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'interruptingEdge'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'interruptingEdge')"/>
        <validationSet>
          <propertyValidationRules name="interruptibleActivityRegion_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.111/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="interval_uml_group" domainClass="uml::Interval" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="min" labelExpression="aql:'Min'" helpExpression="aql:self.getFeatureDescription('min')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('min').changeable" referenceNameExpression="aql:'min'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'min'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'min')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="max" labelExpression="aql:'Max'" helpExpression="aql:self.getFeatureDescription('max')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('max').changeable" referenceNameExpression="aql:'max'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'max'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'max')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="interval_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.112/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="intervalConstraint_uml_group" domainClass="uml::IntervalConstraint" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="context" labelExpression="aql:'Context'" helpExpression="aql:self.getFeatureDescription('context')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('context').changeable" referenceNameExpression="aql:'context'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'context'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'context')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="constrainedElement" labelExpression="aql:'Constrained element'" helpExpression="aql:self.getFeatureDescription('constrainedElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('constrainedElement').changeable" referenceNameExpression="aql:'constrainedElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'constrainedElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'constrainedElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <validationSet>
          <propertyValidationRules name="intervalConstraint_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.113/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="invocationAction_uml_group" domainClass="uml::InvocationAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="onPort" labelExpression="aql:'On port'" helpExpression="aql:self.getFeatureDescription('onPort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('onPort').changeable" referenceNameExpression="aql:'onPort'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'onPort'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'onPort')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="argument" labelExpression="aql:'Argument'" helpExpression="aql:self.getFeatureDescription('argument')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('argument').changeable" referenceNameExpression="aql:'argument'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'argument'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'argument')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="invocationAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.114/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="joinNode_uml_group" domainClass="uml::JoinNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isCombineDuplicate" labelExpression="aql:'Is combine duplicate'" helpExpression="aql:self.getFeatureDescription('isCombineDuplicate')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isCombineDuplicate').changeable" valueExpression="feature:isCombineDuplicate">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isCombineDuplicate',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="joinSpec" labelExpression="aql:'Join spec'" helpExpression="aql:self.getFeatureDescription('joinSpec')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('joinSpec').changeable" referenceNameExpression="aql:'joinSpec'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'joinSpec'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'joinSpec')"/>
        <validationSet>
          <propertyValidationRules name="joinNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.115/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="lifeline_uml_group" domainClass="uml::Lifeline" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="decomposedAs" labelExpression="aql:'Decomposed as'" helpExpression="aql:self.getFeatureDescription('decomposedAs')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('decomposedAs').changeable" referenceNameExpression="aql:'decomposedAs'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'decomposedAs'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'decomposedAs')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="represents" labelExpression="aql:'Represents'" helpExpression="aql:self.getFeatureDescription('represents')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('represents').changeable" referenceNameExpression="aql:'represents'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'represents'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'represents')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selector" labelExpression="aql:'Selector'" helpExpression="aql:self.getFeatureDescription('selector')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selector').changeable" referenceNameExpression="aql:'selector'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selector'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selector')"/>
        <validationSet>
          <propertyValidationRules name="lifeline_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.116/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="linkAction_uml_group" domainClass="uml::LinkAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="endData" labelExpression="aql:'End data'" helpExpression="aql:self.getFeatureDescription('endData')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('endData').changeable" referenceNameExpression="aql:'endData'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'endData'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'endData')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inputValue" labelExpression="aql:'Input value'" helpExpression="aql:self.getFeatureDescription('inputValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inputValue').changeable" referenceNameExpression="aql:'inputValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inputValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inputValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="linkAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.117/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="linkEndCreationData_uml_group" domainClass="uml::LinkEndCreationData" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:CheckboxDescription" name="isReplaceAll" labelExpression="aql:'Is replace all'" helpExpression="aql:self.getFeatureDescription('isReplaceAll')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReplaceAll').changeable" valueExpression="feature:isReplaceAll">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReplaceAll',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="end" labelExpression="aql:'End'" helpExpression="aql:self.getFeatureDescription('end')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('end').changeable" referenceNameExpression="aql:'end'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'end'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'end')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="insertAt" labelExpression="aql:'Insert at'" helpExpression="aql:self.getFeatureDescription('insertAt')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('insertAt').changeable" referenceNameExpression="aql:'insertAt'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'insertAt'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'insertAt')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="qualifier" labelExpression="aql:'Qualifier'" helpExpression="aql:self.getFeatureDescription('qualifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('qualifier').changeable" referenceNameExpression="aql:'qualifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'qualifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'qualifier')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="linkEndData_uml_group" domainClass="uml::LinkEndData" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="end" labelExpression="aql:'End'" helpExpression="aql:self.getFeatureDescription('end')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('end').changeable" referenceNameExpression="aql:'end'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'end'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'end')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="qualifier" labelExpression="aql:'Qualifier'" helpExpression="aql:self.getFeatureDescription('qualifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('qualifier').changeable" referenceNameExpression="aql:'qualifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'qualifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'qualifier')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="linkEndDestructionData_uml_group" domainClass="uml::LinkEndDestructionData" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:CheckboxDescription" name="isDestroyDuplicates" labelExpression="aql:'Is destroy duplicates'" helpExpression="aql:self.getFeatureDescription('isDestroyDuplicates')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDestroyDuplicates').changeable" valueExpression="feature:isDestroyDuplicates">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDestroyDuplicates',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="destroyAt" labelExpression="aql:'Destroy at'" helpExpression="aql:self.getFeatureDescription('destroyAt')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('destroyAt').changeable" referenceNameExpression="aql:'destroyAt'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'destroyAt'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'destroyAt')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="end" labelExpression="aql:'End'" helpExpression="aql:self.getFeatureDescription('end')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('end').changeable" referenceNameExpression="aql:'end'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'end'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'end')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="qualifier" labelExpression="aql:'Qualifier'" helpExpression="aql:self.getFeatureDescription('qualifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('qualifier').changeable" referenceNameExpression="aql:'qualifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'qualifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'qualifier')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="literalBoolean_uml_group" domainClass="uml::LiteralBoolean" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:RadioDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" valueExpression="aql:self.value" candidatesExpression="aql:self.getBooleanEnumerations()" candidateDisplayExpression="aql:candidate.toString()" numberOfColumns="2">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('value',newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="literalBoolean_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.121/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="literalInteger_uml_group" domainClass="uml::LiteralInteger" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" valueExpression="aql:self.getLiteralIntegerValue(input)">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::LiteralInteger).setLiteralIntegerValue(newValue,input)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="literalInteger_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.122/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="literalInteger_uml_group_value_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getLiteralIntegerInputStringValue()+'&quot; is not an Integer.'" targets="//@extensions.0/@categories.0/@groups.122/@controls.2">
            <audits auditExpression="aql:self.validateLiteralIntegerField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="literalNull_uml_group" domainClass="uml::LiteralNull" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="literalNull_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.123/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="literalReal_uml_group" domainClass="uml::LiteralReal" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" valueExpression="aql:self.getLiteralRealValue(input)">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::LiteralReal).setLiteralRealValue(newValue,input)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="literalReal_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.124/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="literalReal_uml_group_value_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getLiteralRealInputStringValue()+'&quot; is not a Real.'" targets="//@extensions.0/@categories.0/@groups.124/@controls.2">
            <audits auditExpression="aql:self.validateLiteralRealField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="literalSpecification_uml_group" domainClass="uml::LiteralSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="literalSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.125/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="literalString_uml_group" domainClass="uml::LiteralString" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" valueExpression="feature:value">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('value',newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="literalString_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.126/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="literalUnlimitedNatural_uml_group" domainClass="uml::LiteralUnlimitedNatural" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" valueExpression="aql:self.getLiteralUnlimitedNaturalValue(input)">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::LiteralUnlimitedNatural).setLiteralUnlimitedNaturalValue(newValue,input)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="literalUnlimitedNatural_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.127/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="literalUnlimitedNatural_uml_group_value_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getLiteralUnlimitedNaturalInputStringValue()+'&quot; is not an UnlimitedNatural. An UnlimitedNatural must be either -1, * or >= 0'" targets="//@extensions.0/@categories.0/@groups.127/@controls.2">
            <audits auditExpression="aql:self.validateLiteralUnlimitedNaturalField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="loopNode_uml_group" domainClass="uml::LoopNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isTestedFirst" labelExpression="aql:'Is tested first'" helpExpression="aql:self.getFeatureDescription('isTestedFirst')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isTestedFirst').changeable" valueExpression="feature:isTestedFirst">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isTestedFirst',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="mustIsolate" labelExpression="aql:'Must isolate'" helpExpression="aql:self.getFeatureDescription('mustIsolate')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mustIsolate').changeable" valueExpression="feature:mustIsolate">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('mustIsolate',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="decider" labelExpression="aql:'Decider'" helpExpression="aql:self.getFeatureDescription('decider')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('decider').changeable" referenceNameExpression="aql:'decider'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'decider'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'decider')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="bodyOutput" labelExpression="aql:'Body output'" helpExpression="aql:self.getFeatureDescription('bodyOutput')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('bodyOutput').changeable" referenceNameExpression="aql:'bodyOutput'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'bodyOutput'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'bodyOutput')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="bodyPart" labelExpression="aql:'Body part'" helpExpression="aql:self.getFeatureDescription('bodyPart')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('bodyPart').changeable" referenceNameExpression="aql:'bodyPart'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'bodyPart'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'bodyPart')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="loopVariable" labelExpression="aql:'Loop variable'" helpExpression="aql:self.getFeatureDescription('loopVariable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('loopVariable').changeable" referenceNameExpression="aql:'loopVariable'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'loopVariable'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'loopVariable')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="loopVariableInput" labelExpression="aql:'Loop variable input'" helpExpression="aql:self.getFeatureDescription('loopVariableInput')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('loopVariableInput').changeable" referenceNameExpression="aql:'loopVariableInput'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'loopVariableInput'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'loopVariableInput')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="setupPart" labelExpression="aql:'Setup part'" helpExpression="aql:self.getFeatureDescription('setupPart')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('setupPart').changeable" referenceNameExpression="aql:'setupPart'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'setupPart'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'setupPart')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="test" labelExpression="aql:'Test'" helpExpression="aql:self.getFeatureDescription('test')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('test').changeable" referenceNameExpression="aql:'test'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'test'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'test')"/>
        <validationSet>
          <propertyValidationRules name="loopNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.128/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="manifestation_uml_group" domainClass="uml::Manifestation" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="mapping" labelExpression="aql:'Mapping'" helpExpression="aql:self.getFeatureDescription('mapping')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mapping').changeable" referenceNameExpression="aql:'mapping'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'mapping'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'mapping')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="utilizedElement" labelExpression="aql:'Utilized element'" helpExpression="aql:self.getFeatureDescription('utilizedElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('utilizedElement').changeable" referenceNameExpression="aql:'utilizedElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'utilizedElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'utilizedElement')"/>
        <validationSet>
          <propertyValidationRules name="manifestation_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.129/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="mergeNode_uml_group" domainClass="uml::MergeNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="mergeNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.130/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="message_uml_group" domainClass="uml::Message" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="messageSort" labelExpression="aql:'Message sort'" helpExpression="aql:self.getFeatureDescription('messageSort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('messageSort').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('messageSort').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.messageSort.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('messageSort').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('messageSort',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="signature" labelExpression="aql:'Signature'" helpExpression="aql:self.getFeatureDescription('signature')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('signature').changeable" referenceNameExpression="aql:'signature'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'signature'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'signature')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="argument" labelExpression="aql:'Argument'" helpExpression="aql:self.getFeatureDescription('argument')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('argument').changeable" referenceNameExpression="aql:'argument'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'argument'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'argument')"/>
        <validationSet>
          <propertyValidationRules name="message_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.131/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="messageEnd_uml_group" domainClass="uml::MessageEnd" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="messageEnd_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.132/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="messageEvent_uml_group" domainClass="uml::MessageEvent" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="messageEvent_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.133/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="messageOccurrenceSpecification_uml_group" domainClass="uml::MessageOccurrenceSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="messageOccurrenceSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.134/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="metaclass_uml_group" domainClass="uml::Class" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:false" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:false" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="qualifiedName" labelExpression="aql:'Qualified name'" helpExpression="A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself." isEnabledExpression="aql:false" valueExpression="aql:self.getQualifiedName()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="metaclass_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.135/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="model_uml_group" domainClass="uml::Model" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="uri" labelExpression="aql:'URI'" helpExpression="aql:self.getFeatureDescription('URI')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('URI').changeable" valueExpression="aql:self.URI">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('URI',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="location" labelExpression="aql:'Location'" helpExpression="aql:'The location of imported package'" isEnabledExpression="aql:false" valueExpression="aql:self.getLocation()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="packageMerge" labelExpression="aql:'Package merge'" helpExpression="aql:self.getFeatureDescription('packageMerge')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('packageMerge').changeable" referenceNameExpression="aql:'packageMerge'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'packageMerge'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'packageMerge')"/>
        <validationSet>
          <propertyValidationRules name="model_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.136/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="multiplicityElement_uml_group" domainClass="uml::MultiplicityElement" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="multiplicityElement_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.137/@controls.2">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="namedElement_uml_group" domainClass="uml::NamedElement" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="namedElement_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.138/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="namedspace_uml_group" domainClass="uml::Namespace" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="namedspace_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.139/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="node_uml_group" domainClass="uml::Node" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="node_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.140/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="objectFlow_uml_group" domainClass="uml::ObjectFlow" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isMulticast" labelExpression="Is multicast" helpExpression="aql:self.getFeatureDescription('isMulticast')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isMulticast').changeable" valueExpression="feature:isMulticast">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isMulticast',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isMultireceive" labelExpression="Is multireceive" helpExpression="aql:self.getFeatureDescription('isMultireceive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isMultireceive').changeable" valueExpression="feature:isMultireceive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isMultireceive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="guard" labelExpression="aql:'Guard'" helpExpression="aql:self.getFeatureDescription('guard')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('guard').changeable" referenceNameExpression="aql:'guard'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'guard'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'guard')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="weight" labelExpression="aql:'Weight'" helpExpression="aql:self.getFeatureDescription('weight')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('weight').changeable" referenceNameExpression="aql:'weight'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'weight'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'weight')"/>
        <validationSet>
          <propertyValidationRules name="objectFlow_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.141/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="objectNode_uml_group" domainClass="uml::ObjectNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="objectNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.142/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="observation_uml_group" domainClass="uml::Observation" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="observation_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.143/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="occurrenceSpecification_uml_group" domainClass="uml::OccurrenceSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="occurrenceSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.144/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="opaqueAction_uml_group" domainClass="uml::OpaqueAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:LanguageExpressionDescription" name="language" labelExpression="aql:'Language'" helpExpression="aql:self.getFeatureDescription('language')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('language').changeable"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="opaqueAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.145/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="opaqueBehavior_uml_group" domainClass="uml::OpaqueBehavior" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReentrant" labelExpression="aql:'Is reentrant'" helpExpression="aql:self.getFeatureDescription('isReentrant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReentrant').changeable" valueExpression="feature:isReentrant">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReentrant',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:LanguageExpressionDescription" name="language" labelExpression="aql:'Language'" helpExpression="aql:self.getFeatureDescription('language')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('language').changeable"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="opaqueBehavior_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.146/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="opaqueExpression_uml_group" domainClass="uml::OpaqueExpression" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:LanguageExpressionDescription" name="language" labelExpression="aql:'Language'" helpExpression="aql:self.getFeatureDescription('language')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('language').changeable"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="behavior" labelExpression="aql:'Behavior'" helpExpression="aql:self.getFeatureDescription('behavior')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('behavior').changeable" referenceNameExpression="aql:'behavior'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'behavior'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'behavior')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="opaqueExpression_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.147/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="operation_uml_group" domainClass="uml::Operation" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isQuery" labelExpression="aql:'Is query'" helpExpression="aql:self.getFeatureDescription('isQuery')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isQuery').changeable" valueExpression="feature:isQuery">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isQuery',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStatic" labelExpression="aql:'Is static'" helpExpression="aql:self.getFeatureDescription('isStatic')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStatic').changeable" valueExpression="feature:isStatic">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStatic',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="concurrency" labelExpression="aql:'Concurrency'" helpExpression="aql:self.getFeatureDescription('concurrency')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('concurrency').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('concurrency').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.concurrency.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('concurrency').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('concurrency',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="bodyCondition" labelExpression="aql:'Body condition'" helpExpression="aql:self.getFeatureDescription('bodyCondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('bodyCondition').changeable" referenceNameExpression="aql:'bodyCondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'bodyCondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'bodyCondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="method" labelExpression="aql:'Method'" helpExpression="aql:self.getFeatureDescription('method')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('method').changeable" referenceNameExpression="aql:'method'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'method'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'method')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameter" labelExpression="aql:'Owned parameter'" helpExpression="aql:self.getFeatureDescription('ownedParameter')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameter').changeable" referenceNameExpression="aql:'ownedParameter'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameter'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameter')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="precondition" labelExpression="aql:'Precondition'" helpExpression="aql:self.getFeatureDescription('precondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('precondition').changeable" referenceNameExpression="aql:'precondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'precondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'precondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="postcondition" labelExpression="aql:'Postcondition'" helpExpression="aql:self.getFeatureDescription('postcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('postcondition').changeable" referenceNameExpression="aql:'postcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'postcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'postcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="raisedException" labelExpression="aql:'Raised Exception'" helpExpression="aql:self.getFeatureDescription('raisedException')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('raisedException').changeable" referenceNameExpression="aql:'raisedException'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'raisedException'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'raisedException')"/>
        <validationSet>
          <propertyValidationRules name="operation_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.148/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="operationTemplateParameter_uml_group" domainClass="uml::OperationTemplateParameter" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="default" labelExpression="aql:'Default'" helpExpression="aql:self.getFeatureDescription('default')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('default').changeable" referenceNameExpression="aql:'default'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'default'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'default')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedDefault" labelExpression="aql:'Owned default'" helpExpression="aql:self.getFeatureDescription('ownedDefault')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedDefault').changeable" referenceNameExpression="aql:'ownedDefault'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedDefault'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedDefault')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameteredElement" labelExpression="aql:'Owned parametered element'" helpExpression="aql:self.getFeatureDescription('ownedParameteredElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameteredElement').changeable" referenceNameExpression="aql:'ownedParameteredElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameteredElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameteredElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="parameteredElement" labelExpression="aql:'Parametered element'" helpExpression="aql:self.getFeatureDescription('parameteredElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('parameteredElement').changeable" referenceNameExpression="aql:'parameteredElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'parameteredElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'parameteredElement')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="outputPin_uml_group" domainClass="uml::OutputPin" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControl" labelExpression="aql:'Is control'" helpExpression="aql:self.getFeatureDescription('isControl')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControl').changeable" valueExpression="feature:isControl">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControl',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="outputPin_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.150/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="outputPin_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.150/@controls.10">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="package_uml_group" domainClass="uml::Package" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="uri" labelExpression="aql:'URI'" helpExpression="aql:self.getFeatureDescription('URI')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('URI').changeable" valueExpression="aql:self.URI">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('URI',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="location" labelExpression="aql:'Location'" helpExpression="aql:'The location of imported package'" isEnabledExpression="aql:false" valueExpression="aql:self.getLocation()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="packageMerge" labelExpression="aql:'Package merge'" helpExpression="aql:self.getFeatureDescription('packageMerge')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('packageMerge').changeable" referenceNameExpression="aql:'packageMerge'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'packageMerge'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'packageMerge')"/>
        <validationSet>
          <propertyValidationRules name="package_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.151/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="packageableElement_uml_group" domainClass="uml::PackageableElement" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="packageableElement_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.152/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="packageImport_uml_group" domainClass="uml::PackageImport" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="importedPackage" labelExpression="aql:'Imported package'" helpExpression="aql:self.getFeatureDescription('importedPackage')" isEnabledExpression="aql:false" referenceNameExpression="aql:'importedPackage'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'importedPackage'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'importedPackage')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="packageMerge_uml_group" domainClass="uml::PackageMerge" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="mergedPackage" labelExpression="aql:'Merged package'" helpExpression="aql:self.getFeatureDescription('mergedPackage')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mergedPackage').changeable" referenceNameExpression="aql:'mergedPackage'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'mergedPackage'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'mergedPackage')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="parameter_uml_group" domainClass="uml::Parameter" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isException" labelExpression="Is exception" helpExpression="aql:self.getFeatureDescription('isException')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isException').changeable" valueExpression="feature:isException">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isException',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStream" labelExpression="aql:'Is stream'" helpExpression="aql:self.getFeatureDescription('isStream')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStream').changeable" valueExpression="feature:isStream">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStream',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="direction" labelExpression="aql:'Direction'" helpExpression="aql:self.getFeatureDescription('direction')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('direction').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('direction').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.direction.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('direction').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('direction',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="effect" labelExpression="aql:'Effect'" helpExpression="aql:self.getFeatureDescription('effect')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('effect').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('effect').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.effect.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('effect').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('effect',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="defaultValue" labelExpression="aql:'Default value'" helpExpression="aql:self.getFeatureDescription('defaultValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('defaultValue').changeable" referenceNameExpression="aql:'defaultValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'defaultValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'defaultValue')"/>
        <validationSet>
          <propertyValidationRules name="parameter_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.155/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="parameter_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.155/@controls.10">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="parameterSet_uml_group" domainClass="uml::ParameterSet" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="condition" labelExpression="aql:'Condition'" helpExpression="aql:self.getFeatureDescription('condition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('condition').changeable" referenceNameExpression="aql:'condition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'condition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'condition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="parameter" labelExpression="aql:'Parameter'" helpExpression="aql:self.getFeatureDescription('parameter')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('parameter').changeable" referenceNameExpression="aql:'parameter'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'parameter'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'parameter')"/>
        <validationSet>
          <propertyValidationRules name="parameterSet_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.156/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="partDecomposition_uml_group" domainClass="uml::PartDecomposition" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="partDecomposition_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.157/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="pin_uml_group" domainClass="uml::Pin" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControl" labelExpression="aql:'Is control'" helpExpression="aql:self.getFeatureDescription('isControl')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControl').changeable" valueExpression="feature:isControl">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControl',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="pin_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.158/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="pin_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.158/@controls.10">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="port_uml_group" domainClass="uml::Port" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isBehavior" labelExpression="Is behavior" helpExpression="aql:self.getFeatureDescription('isBehavior')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isBehavior').changeable" valueExpression="feature:isBehavior">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isBehavior',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDerived" labelExpression="aql:'Is derived'" helpExpression="aql:self.getFeatureDescription('isDerived')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDerived').changeable" valueExpression="feature:isDerived">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDerived',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDerivedUnion" labelExpression="aql:'Is derived union'" helpExpression="aql:self.getFeatureDescription('isDerivedUnion')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDerivedUnion').changeable" valueExpression="feature:isDerivedUnion">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDerivedUnion',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isService" labelExpression="aql:'Is service'" helpExpression="aql:self.getFeatureDescription('isService')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isService').changeable" valueExpression="feature:isService">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isService',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isConjugated" labelExpression="aql:'Is conjugated'" helpExpression="aql:self.getFeatureDescription('isConjugated')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isConjugated').changeable" valueExpression="feature:isConjugated">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isConjugated',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="defaultValue" labelExpression="aql:'Default value'" helpExpression="aql:self.getFeatureDescription('defaultValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('defaultValue').changeable" referenceNameExpression="aql:'defaultValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'defaultValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'defaultValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="provided" labelExpression="aql:'Provided'" helpExpression="aql:self.getFeatureDescription('provided')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('provided').changeable" referenceNameExpression="aql:'provided'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'provided'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'provided')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="required" labelExpression="aql:'Required'" helpExpression="aql:self.getFeatureDescription('required')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('required').changeable" referenceNameExpression="aql:'required'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'required'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'required')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="subsettedProperty" labelExpression="aql:'Subsetted property'" helpExpression="aql:self.getFeatureDescription('subsettedProperty')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('subsettedProperty').changeable" referenceNameExpression="aql:'subsettedProperty'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'subsettedProperty'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'subsettedProperty')"/>
        <validationSet>
          <propertyValidationRules name="port_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.159/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="port_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.159/@controls.10">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="primitiveType_uml_group" domainClass="uml::PrimitiveType" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="primitiveType_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.160/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="profile_uml_group" domainClass="uml::Profile" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="uri" labelExpression="aql:'URI'" helpExpression="aql:self.getFeatureDescription('URI')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('URI').changeable" valueExpression="aql:self.URI">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('URI',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="location" labelExpression="aql:'Location'" helpExpression="aql:'The location of imported package'" isEnabledExpression="aql:false" valueExpression="aql:self.getLocation()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="profile_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.161/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="profileApplication_uml_group" domainClass="uml::ProfileApplication" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:CheckboxDescription" name="isStrict" labelExpression="aql:'Is strict'" helpExpression="aql:self.getFeatureDescription('isStrict')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStrict').changeable" valueExpression="feature:isStrict">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStrict',newValue)"/>
          </initialOperation>
        </controls>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="property_uml_group" domainClass="uml::Property" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDerived" labelExpression="Is derived" helpExpression="aql:self.getFeatureDescription('isDerived')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDerived').changeable" valueExpression="feature:isDerived">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDerived',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDerivedUnion" labelExpression="Is derived union" helpExpression="aql:self.getFeatureDescription('isDerivedUnion')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDerivedUnion').changeable" valueExpression="feature:isDerivedUnion">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDerivedUnion',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="Is ordered" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReadOnly" labelExpression="aql:'Is read only'" helpExpression="aql:self.getFeatureDescription('isReadOnly')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReadOnly').changeable" valueExpression="feature:isReadOnly">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReadOnly',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStatic" labelExpression="aql:'Is static'" helpExpression="aql:self.getFeatureDescription('isStatic')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStatic').changeable" valueExpression="feature:isStatic">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStatic',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="aggregation" labelExpression="aql:'Aggregation'" helpExpression="aql:self.getFeatureDescription('aggregation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('aggregation').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('aggregation').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.aggregation.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('aggregation').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('aggregation',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="defaultValue" labelExpression="aql:'Default value'" helpExpression="aql:self.getFeatureDescription('defaultValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('defaultValue').changeable" referenceNameExpression="aql:'defaultValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'defaultValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'defaultValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="subsettedProperty" labelExpression="aql:'Subsetted property'" helpExpression="aql:self.getFeatureDescription('subsettedProperty')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('subsettedProperty').changeable" referenceNameExpression="aql:'subsettedProperty'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'subsettedProperty'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'subsettedProperty')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="redefinedProperty" labelExpression="aql:'Redefined property'" helpExpression="aql:self.getFeatureDescription('redefinedProperty')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('redefinedProperty').changeable" referenceNameExpression="aql:'redefinedProperty'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'redefinedProperty'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'redefinedProperty')"/>
        <validationSet>
          <propertyValidationRules name="property_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.163/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="property_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.163/@controls.11">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="protocolStateMachine_uml_group" domainClass="uml::ProtocolStateMachine" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReentrant" labelExpression="aql:'Is reentrant'" helpExpression="aql:self.getFeatureDescription('isReentrant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReentrant').changeable" valueExpression="feature:isReentrant">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReentrant',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="protocolStateMachine_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.164/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="protocolTransition_uml_group" domainClass="uml::ProtocolTransition" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="kind" labelExpression="aql:'Kind'" helpExpression="aql:self.getFeatureDescription('kind')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('kind').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('kind').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.kind.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('kind').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('kind',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="effect" labelExpression="aql:'Effect'" helpExpression="aql:self.getFeatureDescription('effect')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('effect').changeable" referenceNameExpression="aql:'effect'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'effect'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'effect')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="guard" labelExpression="aql:'Guard'" helpExpression="aql:self.getFeatureDescription('guard')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('guard').changeable" referenceNameExpression="aql:'guard'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'guard'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'guard')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="postCondition" labelExpression="aql:'Post condition'" helpExpression="aql:self.getFeatureDescription('postCondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('postCondition').changeable" referenceNameExpression="aql:'postCondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'postCondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'postCondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="preCondition" labelExpression="aql:'Pre condition'" helpExpression="aql:self.getFeatureDescription('preCondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('preCondition').changeable" referenceNameExpression="aql:'preCondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'preCondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'preCondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="trigger" labelExpression="aql:'Trigger'" helpExpression="aql:self.getFeatureDescription('trigger')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('trigger').changeable" referenceNameExpression="aql:'trigger'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'trigger'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'trigger')"/>
        <validationSet>
          <propertyValidationRules name="protocolTransition_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.165/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="pseudoState_uml_group" domainClass="uml::Pseudostate" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="pseudoState_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.166/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="qualifierValue_uml_group" domainClass="uml::QualifierValue" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="qualifier" labelExpression="aql:'Qualifier'" helpExpression="aql:self.getFeatureDescription('qualifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('qualifier').changeable" referenceNameExpression="aql:'qualifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'qualifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'qualifier')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="raiseExceptionAction_uml_group" domainClass="uml::RaiseExceptionAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="exception" labelExpression="aql:'Exception'" helpExpression="aql:self.getFeatureDescription('exception')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('exception').changeable" referenceNameExpression="aql:'exception'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'exception'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'exception')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="raiseExceptionAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.168/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="readExtentAction_uml_group" domainClass="uml::ReadExtentAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="classifier" labelExpression="aql:'Classifier'" helpExpression="aql:self.getFeatureDescription('classifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('classifier').changeable" referenceNameExpression="aql:'classifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'classifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'classifier')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="readExtentAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.169/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="readIsClassifiedObjectAction_uml_group" domainClass="uml::ReadIsClassifiedObjectAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isDirect" labelExpression="aql:'Is direct'" helpExpression="aql:self.getFeatureDescription('isDirect')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isDirect').changeable" valueExpression="feature:isDirect">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isDirect',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="classifier" labelExpression="aql:'Classifier'" helpExpression="aql:self.getFeatureDescription('classifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('classifier').changeable" referenceNameExpression="aql:'classifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'classifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'classifier')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="readIsClassifiedObjectAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.170/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="readLinkAction_uml_group" domainClass="uml::ReadLinkAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="endData" labelExpression="aql:'End data'" helpExpression="aql:self.getFeatureDescription('endData')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('endData').changeable" referenceNameExpression="aql:'endData'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'endData'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'endData')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inputValue" labelExpression="aql:'Input value'" helpExpression="aql:self.getFeatureDescription('inputValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inputValue').changeable" referenceNameExpression="aql:'inputValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inputValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inputValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="readLinkAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.171/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="readLinkObjectEndAction_uml_group" domainClass="uml::ReadLinkObjectEndAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="end" labelExpression="aql:'End'" helpExpression="aql:self.getFeatureDescription('end')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('end').changeable" referenceNameExpression="aql:'end'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'end'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'end')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="readLinkObjectEndAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.172/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="readLinkObjectEndQualifierAction_uml_group" domainClass="uml::ReadLinkObjectEndQualifierAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="qualifier" labelExpression="aql:'Qualifier'" helpExpression="aql:self.getFeatureDescription('qualifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('qualifier').changeable" referenceNameExpression="aql:'qualifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'qualifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'qualifier')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="readLinkObjectEndQualifierAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.173/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="readSelfAction_uml_group" domainClass="uml::ReadSelfAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="readSelfAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.174/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="readStructuralFeatureAction_uml_group" domainClass="uml::ReadStructuralFeatureAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="structuralFeature" labelExpression="aql:'Structural feature'" helpExpression="aql:self.getFeatureDescription('structuralFeature')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('structuralFeature').changeable" referenceNameExpression="aql:'structuralFeature'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'structuralFeature'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'structuralFeature')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="readStructuralFeatureAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.175/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="readVariableAction_uml_group" domainClass="uml::ReadVariableAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="variable" labelExpression="aql:'Variable'" helpExpression="aql:self.getFeatureDescription('variable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('variable').changeable" referenceNameExpression="aql:'variable'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'variable'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'variable')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="readVariableAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.176/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="reclassifyObjectAction_uml_group" domainClass="uml::ReclassifyObjectAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReplaceAll" labelExpression="aql:'Is replace all'" helpExpression="aql:self.getFeatureDescription('isReplaceAll')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReplaceAll').changeable" valueExpression="feature:isReplaceAll">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReplaceAll',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="newClassifier" labelExpression="aql:'New classifier'" helpExpression="aql:self.getFeatureDescription('newClassifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('newClassifier').changeable" referenceNameExpression="aql:'newClassifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'newClassifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'newClassifier')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="oldClassifier" labelExpression="aql:'Old classifier'" helpExpression="aql:self.getFeatureDescription('oldClassifier')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('oldClassifier').changeable" referenceNameExpression="aql:'oldClassifier'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'oldClassifier'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'oldClassifier')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="reclassifyObjectAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.177/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="reduceAction_uml_group" domainClass="uml::ReduceAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="collection" labelExpression="aql:'Collection'" helpExpression="aql:self.getFeatureDescription('collection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('collection').changeable" referenceNameExpression="aql:'collection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'collection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'collection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="reducer" labelExpression="aql:'Reducer'" helpExpression="aql:self.getFeatureDescription('reducer')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('reducer').changeable" referenceNameExpression="aql:'reducer'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'reducer'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'reducer')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="reduceAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.178/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="realization_uml_group" domainClass="uml::Realization" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="mapping" labelExpression="aql:'Mapping'" helpExpression="aql:self.getFeatureDescription('mapping')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mapping').changeable" referenceNameExpression="aql:'mapping'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'mapping'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'mapping')"/>
        <validationSet>
          <propertyValidationRules name="realization_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.179/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="reception_uml_group" domainClass="uml::Reception" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStatic" labelExpression="aql:'Is static'" helpExpression="aql:self.getFeatureDescription('isStatic')" valueExpression="feature:isStatic">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStatic',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="concurrency" labelExpression="aql:'Concurrency'" helpExpression="aql:self.getFeatureDescription('concurrency')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('concurrency').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('concurrency').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.concurrency.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('concurrency').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('concurrency',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="signal" labelExpression="aql:'Signal'" helpExpression="aql:self.getFeatureDescription('signal')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('signal').changeable" referenceNameExpression="aql:'signal'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'signal'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'signal')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="method" labelExpression="aql:'Method'" helpExpression="aql:self.getFeatureDescription('method')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('method').changeable" referenceNameExpression="aql:'method'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'method'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'method')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameter" labelExpression="aql:'Owned parameter'" helpExpression="aql:self.getFeatureDescription('ownedParameter')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameter').changeable" referenceNameExpression="aql:'ownedParameter'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameter'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameter')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="raisedException" labelExpression="aql:'Raised Exception'" helpExpression="aql:self.getFeatureDescription('raisedException')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('raisedException').changeable" referenceNameExpression="aql:'raisedException'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'raisedException'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'raisedException')"/>
        <validationSet>
          <propertyValidationRules name="reception_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.180/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="redefinableElement_uml_group" domainClass="uml::NamedElement" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="redefinableElement_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.181/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="redefinableTemplateSignature_uml_group" domainClass="uml::RedefinableTemplateSignature" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameter" labelExpression="aql:'Owned parameter'" helpExpression="aql:self.getFeatureDescription('ownedParameter')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameter').changeable" referenceNameExpression="aql:'ownedParameter'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameter'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameter')"/>
        <validationSet>
          <propertyValidationRules name="redefinableTemplateSignature_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.182/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="region_uml_group" domainClass="uml::Region" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="region_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.183/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="removeStructuralFeatureValueAction_uml_group" domainClass="uml::RemoveStructuralFeatureValueAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isRemoveDuplicates" labelExpression="aql:'Is remove duplicates'" helpExpression="aql:self.getFeatureDescription('isRemoveDuplicates')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isRemoveDuplicates').changeable" valueExpression="feature:isRemoveDuplicates">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isRemoveDuplicates',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="removeAt" labelExpression="aql:'Remove at'" helpExpression="aql:self.getFeatureDescription('removeAt')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('removeAt').changeable" referenceNameExpression="aql:'removeAt'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'removeAt'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'removeAt')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="structuralFeature" labelExpression="aql:'Structural feature'" helpExpression="aql:self.getFeatureDescription('structuralFeature')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('structuralFeature').changeable" referenceNameExpression="aql:'structuralFeature'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'structuralFeature'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'structuralFeature')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="removeStructuralFeatureValueAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.184/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="removeVariableValueAction_uml_group" domainClass="uml::RemoveVariableValueAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isRemoveDuplicates" labelExpression="aql:'Is remove duplicates'" helpExpression="aql:self.getFeatureDescription('isRemoveDuplicates')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isRemoveDuplicates').changeable" valueExpression="feature:isRemoveDuplicates">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isRemoveDuplicates',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="removeAt" labelExpression="aql:'Remove at'" helpExpression="aql:self.getFeatureDescription('removeAt')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('removeAt').changeable" referenceNameExpression="aql:'removeAt'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'removeAt'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'removeAt')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="variable" labelExpression="aql:'Variable'" helpExpression="aql:self.getFeatureDescription('variable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('variable').changeable" referenceNameExpression="aql:'variable'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'variable'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'variable')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="removeVariableValueAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.185/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="replyAction_uml_group" domainClass="uml::ReplyAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="replyToCall" labelExpression="aql:'Reply to call'" helpExpression="aql:self.getFeatureDescription('replyToCall')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('replyToCall').changeable" referenceNameExpression="aql:'replyToCall'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'replyToCall'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'replyToCall')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="returnInformation" labelExpression="aql:'Return information'" helpExpression="aql:self.getFeatureDescription('returnInformation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('returnInformation').changeable" referenceNameExpression="aql:'returnInformation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'returnInformation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'returnInformation')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="replyValue" labelExpression="aql:'Reply value'" helpExpression="aql:self.getFeatureDescription('replyValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('replyValue').changeable" referenceNameExpression="aql:'replyValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'replyValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'replyValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="replyAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.186/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="sendObjectAction_uml_group" domainClass="uml::SendObjectAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="onPort" labelExpression="aql:'On port'" helpExpression="aql:self.getFeatureDescription('onPort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('onPort').changeable" referenceNameExpression="aql:'onPort'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'onPort'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'onPort')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="request" labelExpression="aql:'Request'" helpExpression="aql:self.getFeatureDescription('request')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('request').changeable" referenceNameExpression="aql:'request'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'request'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'request')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="target" labelExpression="aql:'Target'" helpExpression="aql:self.getFeatureDescription('target')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('target').changeable" referenceNameExpression="aql:'target'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'target'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'target')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="sendObjectAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.187/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="sendSignalAction_uml_group" domainClass="uml::SendSignalAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="onPort" labelExpression="aql:'On port'" helpExpression="aql:self.getFeatureDescription('onPort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('onPort').changeable" referenceNameExpression="aql:'onPort'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'onPort'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'onPort')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="signal" labelExpression="aql:'Signal'" helpExpression="aql:self.getFeatureDescription('signal')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('signal').changeable" referenceNameExpression="aql:'signal'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'signal'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'signal')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="target" labelExpression="aql:'Target'" helpExpression="aql:self.getFeatureDescription('target')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('target').changeable" referenceNameExpression="aql:'target'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'target'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'target')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="argument" labelExpression="aql:'Argument'" helpExpression="aql:self.getFeatureDescription('argument')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('argument').changeable" referenceNameExpression="aql:'argument'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'argument'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'argument')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <validationSet>
          <propertyValidationRules name="sendSignalAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.188/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="sequenceNode_uml_group" domainClass="uml::SequenceNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="mustIsolate" labelExpression="aql:'Must isolate'" helpExpression="aql:self.getFeatureDescription('mustIsolate')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mustIsolate').changeable" valueExpression="feature:mustIsolate">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('mustIsolate',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="executableNode" labelExpression="aql:'Executable node'" helpExpression="aql:self.getFeatureDescription('executableNode')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('executableNode').changeable" referenceNameExpression="aql:'executableNode'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'executableNode'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'executableNode')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <validationSet>
          <propertyValidationRules name="sequenceNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.189/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="signal_uml_group" domainClass="uml::Signal" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <validationSet>
          <propertyValidationRules name="signal_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.190/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="signalEvent_uml_group" domainClass="uml::SignalEvent" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="signal" labelExpression="aql:'Signal'" helpExpression="aql:self.getFeatureDescription('signal')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('signal').changeable" referenceNameExpression="aql:'signal'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'signal'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'signal')"/>
        <validationSet>
          <propertyValidationRules name="signalEvent_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.191/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="slot_uml_group" domainClass="uml::Slot" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="definingFeature" labelExpression="aql:'Defining feature'" helpExpression="aql:self.getFeatureDescription('definingFeature')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('definingFeature').changeable" referenceNameExpression="aql:'definingFeature'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'definingFeature'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'definingFeature')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="startClassifierBehaviorAction_uml_group" domainClass="uml::StartClassifierBehaviorAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="startClassifierBehaviorAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.193/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="startObjectBehaviorAction_uml_group" domainClass="uml::StartObjectBehaviorAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isSynchronous" labelExpression="aql:'Is synchronous'" helpExpression="aql:self.getFeatureDescription('isSynchronous')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isSynchronous').changeable" valueExpression="feature:isSynchronous">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isSynchronous',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="onPort" labelExpression="aql:'On port'" helpExpression="aql:self.getFeatureDescription('onPort')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('onPort').changeable" referenceNameExpression="aql:'onPort'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'onPort'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'onPort')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="argument" labelExpression="aql:'Argument'" helpExpression="aql:self.getFeatureDescription('argument')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('argument').changeable" referenceNameExpression="aql:'argument'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'argument'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'argument')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="startObjectBehaviorAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.194/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="state_uml_group" domainClass="uml::State" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="stateInvariant" labelExpression="aql:'State invariant'" helpExpression="aql:self.getFeatureDescription('stateInvariant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('stateInvariant').changeable" referenceNameExpression="aql:'stateInvariant'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'stateInvariant'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'stateInvariant')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="entry" labelExpression="aql:'Entry'" helpExpression="aql:self.getFeatureDescription('entry')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('entry').changeable" referenceNameExpression="aql:'entry'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'entry'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'entry')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="doActivity" labelExpression="aql:'Do activity'" helpExpression="aql:self.getFeatureDescription('doActivity')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('doActivity').changeable" referenceNameExpression="aql:'doActivity'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'doActivity'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'doActivity')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="exit" labelExpression="aql:'Exit'" helpExpression="aql:self.getFeatureDescription('exit')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('exit').changeable" referenceNameExpression="aql:'exit'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'exit'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'exit')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="submachine" labelExpression="aql:'Submachine'" helpExpression="aql:self.getFeatureDescription('submachine')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('submachine').changeable" referenceNameExpression="aql:'submachine'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'submachine'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'submachine')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="deferrableTrigger" labelExpression="aql:'Deferrable trigger'" helpExpression="aql:self.getFeatureDescription('deferrableTrigger')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('deferrableTrigger').changeable" referenceNameExpression="aql:'deferrableTrigger'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'deferrableTrigger'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'deferrableTrigger')"/>
        <validationSet>
          <propertyValidationRules name="state_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.195/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="stateInvariant_uml_group" domainClass="uml::StateInvariant" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="invariant" labelExpression="aql:'Invariant'" helpExpression="aql:self.getFeatureDescription('invariant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('invariant').changeable" referenceNameExpression="aql:'invariant'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'invariant'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'invariant')"/>
        <validationSet>
          <propertyValidationRules name="stateInvariant_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.196/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="stateMachine_uml_group" domainClass="uml::StateMachine" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isActive" labelExpression="aql:'Is active'" helpExpression="aql:self.getFeatureDescription('isActive')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isActive').changeable" valueExpression="feature:isActive">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isActive',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReentrant" labelExpression="aql:'Is reentrant'" helpExpression="aql:self.getFeatureDescription('isReentrant')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReentrant').changeable" valueExpression="feature:isReentrant">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReentrant',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="useCase" labelExpression="aql:'Use case'" helpExpression="aql:self.getFeatureDescription('useCase')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('useCase').changeable" referenceNameExpression="aql:'useCase'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'useCase'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'useCase')"/>
        <validationSet>
          <propertyValidationRules name="stateMachine_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.197/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="stereotype_uml_group" domainClass="uml::Stereotype" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="icon" labelExpression="aql:'Icon'" helpExpression="aql:self.getFeatureDescription('icon')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('icon').changeable" referenceNameExpression="aql:'icon'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'icon'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'icon')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedAttribute" labelExpression="aql:'Owned attribute'" helpExpression="aql:self.getFeatureDescription('ownedAttribute')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedAttribute').changeable" referenceNameExpression="aql:'ownedAttribute'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedAttribute'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedAttribute')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedOperation" labelExpression="aql:'Owned operation'" helpExpression="aql:self.getFeatureDescription('ownedOperation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedOperation').changeable" referenceNameExpression="aql:'ownedOperation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedOperation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedOperation')"/>
        <validationSet>
          <propertyValidationRules name="stereotype_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.198/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="stringExpression_uml_group" domainClass="uml::StringExpression" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="symbol" labelExpression="aql:'Symbol'" helpExpression="aql:self.getFeatureDescription('symbol')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('symbol').changeable" valueExpression="feature:symbol">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('symbol',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="operand" labelExpression="aql:'Operand'" helpExpression="aql:self.getFeatureDescription('operand')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('operand').changeable" referenceNameExpression="aql:'operand'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'operand'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'operand')"/>
        <validationSet>
          <propertyValidationRules name="stringExpression_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.199/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="structuralFeature_uml_group" domainClass="uml::StructuralFeature" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isReadOnly" labelExpression="aql:'Is read only'" helpExpression="aql:self.getFeatureDescription('isReadOnly')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isReadOnly').changeable" valueExpression="feature:isReadOnly">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isReadOnly',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isStatic" labelExpression="aql:'Is static'" helpExpression="aql:self.getFeatureDescription('isStatic')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isStatic').changeable" valueExpression="feature:isStatic">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isStatic',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="structuralFeature_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.200/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="structuralFeature_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.200/@controls.8">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="structuralFeatureAction_uml_group" domainClass="uml::StructuralFeatureAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="structuralFeature" labelExpression="aql:'Structural feature'" helpExpression="aql:self.getFeatureDescription('structuralFeature')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('structuralFeature').changeable" referenceNameExpression="aql:'structuralFeature'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'structuralFeature'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'structuralFeature')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="structuralFeatureAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.201/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="structuredActivityNode_uml_group" domainClass="uml::StructuredActivityNode" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="mustIsolate" labelExpression="aql:'Must isolate'" helpExpression="aql:self.getFeatureDescription('mustIsolate')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mustIsolate').changeable" valueExpression="feature:mustIsolate">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('mustIsolate',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="structuredActivityNode_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.202/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="substitution_uml_group" domainClass="uml::Substitution" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="mapping" labelExpression="aql:'Mapping'" helpExpression="aql:self.getFeatureDescription('mapping')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('mapping').changeable" referenceNameExpression="aql:'mapping'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'mapping'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'mapping')"/>
        <validationSet>
          <propertyValidationRules name="substitution_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.203/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="templateBinding_uml_group" domainClass="uml::TemplateBinding" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="parameterSubstitution" labelExpression="aql:'Parameter substitution'" helpExpression="aql:self.getFeatureDescription('parameterSubstitution')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('parameterSubstitution').changeable" referenceNameExpression="aql:'parameterSubstitution'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'parameterSubstitution'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'parameterSubstitution')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="templateParameter_uml_group" domainClass="uml::TemplateParameter" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="default" labelExpression="aql:'Default'" helpExpression="aql:self.getFeatureDescription('default')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('default').changeable" referenceNameExpression="aql:'default'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'default'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'default')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedDefault" labelExpression="aql:'Owned default'" helpExpression="aql:self.getFeatureDescription('ownedDefault')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedDefault').changeable" referenceNameExpression="aql:'ownedDefault'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedDefault'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedDefault')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedParameteredElement" labelExpression="aql:'Owned parametered element'" helpExpression="aql:self.getFeatureDescription('ownedParameteredElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedParameteredElement').changeable" referenceNameExpression="aql:'ownedParameteredElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedParameteredElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedParameteredElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="parameteredElement" labelExpression="aql:'Parametered element'" helpExpression="aql:self.getFeatureDescription('parameteredElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('parameteredElement').changeable" referenceNameExpression="aql:'parameteredElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'parameteredElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'parameteredElement')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="templateParameterSubstitution_uml_group" domainClass="uml::TemplateParameterSubstitution" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="formal" labelExpression="aql:'Formal'" helpExpression="aql:self.getFeatureDescription('formal')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('formal').changeable" referenceNameExpression="aql:'formal'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'formal'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'formal')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="actual" labelExpression="aql:'Actual'" helpExpression="aql:self.getFeatureDescription('actual')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('actual').changeable" referenceNameExpression="aql:'actual'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'actual'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'actual')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedActual" labelExpression="aql:'Owned actual'" helpExpression="aql:self.getFeatureDescription('ownedActual')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedActual').changeable" referenceNameExpression="aql:'ownedActual'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedActual'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedActual')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="testIdentityAction_uml_group" domainClass="uml::TestIdentityAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="first" labelExpression="aql:'First'" helpExpression="aql:self.getFeatureDescription('first')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('first').changeable" referenceNameExpression="aql:'first'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'first'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'first')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="second" labelExpression="aql:'Second'" helpExpression="aql:self.getFeatureDescription('second')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('second').changeable" referenceNameExpression="aql:'second'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'second'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'second')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="testIdentityAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.207/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="timeConstraint_uml_group" domainClass="uml::TimeConstraint" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="firstEvent" labelExpression="aql:'First event'" helpExpression="aql:self.getFeatureDescription('firstEvent')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('firstEvent').changeable" valueExpression="feature:firstEvent">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('firstEvent',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="constrainedElement" labelExpression="aql:'Constrained element'" helpExpression="aql:self.getFeatureDescription('constrainedElement')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('constrainedElement').changeable" referenceNameExpression="aql:'constrainedElement'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'constrainedElement'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'constrainedElement')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="context" labelExpression="aql:'Context'" helpExpression="aql:self.getFeatureDescription('context')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('context').changeable" referenceNameExpression="aql:'context'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'context'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'context')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="specification" labelExpression="aql:'Specification'" helpExpression="aql:self.getFeatureDescription('specification')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('specification').changeable" referenceNameExpression="aql:'specification'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'specification'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'specification')"/>
        <validationSet>
          <propertyValidationRules name="timeConstraint_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.208/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="timeEvent_uml_group" domainClass="uml::TimeEvent" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isRelative" labelExpression="aql:'Is relative'" helpExpression="aql:self.getFeatureDescription('isRelative')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isRelative').changeable" valueExpression="feature:isRelative">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isRelative',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="when" labelExpression="aql:'When'" helpExpression="aql:self.getFeatureDescription('when')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('when').changeable" referenceNameExpression="aql:'when'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'when'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'when')"/>
        <validationSet>
          <propertyValidationRules name="timeEvent_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.209/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="timeExpression_uml_group" domainClass="uml::TimeExpression" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="expr" labelExpression="aql:'Expr'" helpExpression="aql:self.getFeatureDescription('expr')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('expr').changeable" referenceNameExpression="aql:'expr'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'expr'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'expr')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="observation" labelExpression="aql:'Observation'" helpExpression="aql:self.getFeatureDescription('observation')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('observation').changeable" referenceNameExpression="aql:'observation'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'observation'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'observation')"/>
        <validationSet>
          <propertyValidationRules name="timeExpression_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.210/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="timeInterval_uml_group" domainClass="uml::TimeInterval" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="min" labelExpression="aql:'Min'" helpExpression="aql:self.getFeatureDescription('min')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('min').changeable" referenceNameExpression="aql:'min'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'min'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'min')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="max" labelExpression="aql:'Max'" helpExpression="aql:self.getFeatureDescription('max')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('max').changeable" referenceNameExpression="aql:'max'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'max'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'max')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="timeInterval_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.211/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="timeObservation_uml_group" domainClass="uml::TimeObservation" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="firstEvent" labelExpression="aql:'First event'" helpExpression="aql:self.getFeatureDescription('firstEvent')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('firstEvent').changeable" valueExpression="feature:firstEvent">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('firstEvent',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="event" labelExpression="aql:'Event'" helpExpression="aql:self.getFeatureDescription('event')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('event').changeable" referenceNameExpression="aql:'event'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'event'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'event')"/>
        <validationSet>
          <propertyValidationRules name="timeObservation_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.212/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="transition_uml_group" domainClass="uml::Transition" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="kind" labelExpression="aql:'Kind'" helpExpression="aql:self.getFeatureDescription('kind')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('kind').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('kind').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.kind.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('kind').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('kind',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="trigger" labelExpression="aql:'Trigger'" helpExpression="aql:self.getFeatureDescription('trigger')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('trigger').changeable" referenceNameExpression="aql:'trigger'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'trigger'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'trigger')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="guard" labelExpression="aql:'Guard'" helpExpression="aql:self.getFeatureDescription('guard')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('guard').changeable" referenceNameExpression="aql:'guard'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'guard'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'guard')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="effect" labelExpression="aql:'Effect'" helpExpression="aql:self.getFeatureDescription('effect')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('effect').changeable" referenceNameExpression="aql:'effect'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'effect'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'effect')"/>
        <validationSet>
          <propertyValidationRules name="transition_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.213/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="trigger_uml_group" domainClass="uml::Trigger" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="event" labelExpression="aql:'Event'" helpExpression="aql:self.getFeatureDescription('event')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('event').changeable" referenceNameExpression="aql:'event'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'event'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'event')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="port" labelExpression="aql:'Port'" helpExpression="aql:self.getFeatureDescription('port')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('port').changeable" referenceNameExpression="aql:'port'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'port'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'port')"/>
        <validationSet>
          <propertyValidationRules name="trigger_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.214/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="type_uml_group" domainClass="uml::Type" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="type_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.215/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="typedElement_uml_group" domainClass="uml::TypedElement" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="typedElement_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.216/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="unmarshallAction_uml_group" domainClass="uml::UnmarshallAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="unmarshallType" labelExpression="aql:'Unmarshall type'" helpExpression="aql:self.getFeatureDescription('unmarshallType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('unmarshallType').changeable" referenceNameExpression="aql:'unmarshallType'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'unmarshallType'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'unmarshallType')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="unmarshallAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.217/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="usage_uml_group" domainClass="uml::Usage" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="usage_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.218/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="useCase_uml_group" domainClass="uml::UseCase" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isAbstract" labelExpression="Is abstract" helpExpression="aql:self.getFeatureDescription('isAbstract')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isAbstract').changeable" valueExpression="feature:isAbstract">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isAbstract',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="subject" labelExpression="aql:'Subject'" helpExpression="aql:self.getFeatureDescription('subject')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('subject').changeable" referenceNameExpression="aql:'subject'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'subject'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'subject')"/>
        <validationSet>
          <propertyValidationRules name="useCase_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.219/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="valuePin_uml_group" domainClass="uml::ValuePin" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControl" labelExpression="aql:'Is control'" helpExpression="aql:self.getFeatureDescription('isControl')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControl').changeable" valueExpression="feature:isControl">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControl',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isControlType" labelExpression="aql:'Is control type'" helpExpression="aql:self.getFeatureDescription('isControlType')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isControlType').changeable" valueExpression="feature:isControlType">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isControlType',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="ordering" labelExpression="aql:'Ordering'" helpExpression="aql:self.getFeatureDescription('ordering')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ordering').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.ordering.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('ordering').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('ordering',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="selection" labelExpression="aql:'Selection'" helpExpression="aql:self.getFeatureDescription('selection')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('selection').changeable" referenceNameExpression="aql:'selection'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'selection'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'selection')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="upperBound" labelExpression="aql:'Upper bound'" helpExpression="aql:self.getFeatureDescription('upperBound')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('upperBound').changeable" referenceNameExpression="aql:'upperBound'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'upperBound'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'upperBound')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inState" labelExpression="aql:'In state'" helpExpression="aql:self.getFeatureDescription('inState')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inState').changeable" referenceNameExpression="aql:'inState'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inState'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inState')"/>
        <validationSet>
          <propertyValidationRules name="valuePin_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.220/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="valuePin_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.220/@controls.8">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="valueSpecification_uml_group" domainClass="uml::ValueSpecification" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <validationSet>
          <propertyValidationRules name="valueSpecification_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.221/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="valueSpecificationAction_uml_group" domainClass="uml::ValueSpecificationAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="valueSpecificationAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.222/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="variable_uml_group" domainClass="uml::Variable" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isOrdered" labelExpression="aql:'Is ordered'" helpExpression="aql:self.getFeatureDescription('isOrdered')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isOrdered').changeable" valueExpression="feature:isOrdered">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isOrdered',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="isUnique" labelExpression="aql:'Is unique'" helpExpression="aql:self.getFeatureDescription('isUnique')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('isUnique').changeable" valueExpression="feature:isUnique">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('isUnique',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.getFeatureDescription('type')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('type').changeable" referenceNameExpression="aql:'type'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'type')"/>
        <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.getMultiplicityHelpContent()" isEnabledExpression="aql:self.eClass().getEStructuralFeature('lowerValue').changeable and self.eClass().getEStructuralFeature('upperValue').changeable" valueExpression="aql:self.getMultiplicity()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::MultiplicityElement).setMultiplicity(newValue,input)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="variable_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.223/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="variable_uml_group_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.223/@controls.6">
            <audits auditExpression="aql:self.validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="variableAction_uml_group" domainClass="uml::VariableAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="variable" labelExpression="aql:'Variable'" helpExpression="aql:self.getFeatureDescription('variable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('variable').changeable" referenceNameExpression="aql:'variable'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'variable'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'variable')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="variableAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.224/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="vertex_uml_group" domainClass="uml::Vertex" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <validationSet>
          <propertyValidationRules name="vertex_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.225/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="writeLinkAction_uml_group" domainClass="uml::WriteLinkAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="endData" labelExpression="aql:'End data'" helpExpression="aql:self.getFeatureDescription('endData')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('endData').changeable" referenceNameExpression="aql:'endData'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'endData'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'endData')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="inputValue" labelExpression="aql:'Input value'" helpExpression="aql:self.getFeatureDescription('inputValue')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('inputValue').changeable" referenceNameExpression="aql:'inputValue'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'inputValue'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'inputValue')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="writeLinkAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.226/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="writeStructuralFeatureAction_uml_group" domainClass="uml::WriteStructuralFeatureAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="object" labelExpression="aql:'Object'" helpExpression="aql:self.getFeatureDescription('object')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('object').changeable" referenceNameExpression="aql:'object'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'object'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'object')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="result" labelExpression="aql:'Result'" helpExpression="aql:self.getFeatureDescription('result')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('result').changeable" referenceNameExpression="aql:'result'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'result'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'result')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="structuralFeature" labelExpression="aql:'Structural feature'" helpExpression="aql:self.getFeatureDescription('structuralFeature')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('structuralFeature').changeable" referenceNameExpression="aql:'structuralFeature'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'structuralFeature'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'structuralFeature')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="writeStructuralFeatureAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.227/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="writeVariableAction_uml_group" domainClass="uml::WriteVariableAction" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.getFeatureDescription('name')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('name').changeable" valueExpression="feature:name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('name',newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('label').changeable" valueExpression="aql:self.getLabel()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::NamedElement).setLabel(newValue)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:SelectDescription" name="visibility" labelExpression="aql:'Visibility'" helpExpression="aql:self.getFeatureDescription('visibility')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('visibility').changeable" valueExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.visibility.toString())" candidatesExpression="aql:self.eClass().getEStructuralFeature('visibility').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.set('visibility',newValue.instance)"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="value" labelExpression="aql:'Value'" helpExpression="aql:self.getFeatureDescription('value')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('value').changeable" referenceNameExpression="aql:'value'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'value'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'value')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="variable" labelExpression="aql:'Variable'" helpExpression="aql:self.getFeatureDescription('variable')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('variable').changeable" referenceNameExpression="aql:'variable'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'variable'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'variable')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPostcondition" labelExpression="aql:'Local postcondition'" helpExpression="aql:self.getFeatureDescription('localPostcondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPostcondition').changeable" referenceNameExpression="aql:'localPostcondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPostcondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPostcondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="localPrecondition" labelExpression="aql:'Local precondition'" helpExpression="aql:self.getFeatureDescription('localPrecondition')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('localPrecondition').changeable" referenceNameExpression="aql:'localPrecondition'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'localPrecondition'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'localPrecondition')"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="handler" labelExpression="aql:'Handler'" helpExpression="aql:self.getFeatureDescription('handler')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('handler').changeable" referenceNameExpression="aql:'handler'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'handler'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'handler')"/>
        <validationSet>
          <propertyValidationRules name="writeVariableAction_uml_group_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.228/@controls.0">
            <audits auditExpression="aql:self.validateNamedElement()"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="uml_multipleSelection_group" domainClass="uml::Element" semanticCandidateExpression="aql:input.getSelectedSemanticElements()->first()" preconditionExpression="aql:input.getSelectedSemanticElements()->first()=self">
        <controls xsi:type="properties:DynamicMappingForDescription" name="For all common features" iterator="feature" iterableExpression="aql:input.getSelectedSemanticElements()->getCommonFeatures()" forceRefresh="true">
          <ifs name="isBoolean" predicateExpression="aql:feature.isBoolean()">
            <widget xsi:type="properties:CheckboxDescription" name="Generic Checkbox" labelExpression="aql:if null=(input.getSelectedSemanticElements()->getCheckboxMultipleValue(feature)) then  feature.name.formatName().toUpperFirst()+' (mixed values)' else feature.name.formatName().toUpperFirst() endif" helpExpression="aql:self.getFeatureDescription(feature.name)" isEnabledExpression="aql:feature.changeable" valueExpression="aql:input.getSelectedSemanticElements()->getCheckboxMultipleValue(feature)">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:input.getSelectedSemanticElements()->setAll(feature,newValue)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:null=(input.getSelectedSemanticElements()->getCheckboxMultipleValue(feature))">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="isEnum" predicateExpression="aql:feature.isEnum()">
            <widget xsi:type="properties:SelectDescription" name="Generic Drop-down List" labelExpression="aql:feature.name.formatName().toUpperFirst()" helpExpression="aql:self.getFeatureDescription(feature.name)" isEnabledExpression="aql:feature.changeable" valueExpression="aql:input.getSelectedSemanticElements()->getSelectMultipleValue(feature)" candidatesExpression="aql:feature.eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:input.getSelectedSemanticElements()->setAll(feature,newValue.instance)"/>
              </initialOperation>
            </widget>
          </ifs>
        </controls>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="element_comments_group" domainClass="uml::Element" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:InputContentPapyrusReferenceDescription" name="appliedComment" labelExpression="aql:'Applied comments'" helpExpression="aql:'The list of comments applied to this element'" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedComment').changeable" referenceNameExpression="aql:'ownedComment'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedComment'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:selection.updateReference(self,'annotatedElement')" inputContentExpression="aql: self.getAllAppliedComments()"/>
        <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="ownedComment" labelExpression="aql:'Owned comments'" helpExpression="aql:self.getFeatureDescription('ownedComment')" isEnabledExpression="aql:self.eClass().getEStructuralFeature('ownedComment').changeable" referenceNameExpression="aql:'ownedComment'" removeExpression="aql:selection->forAll(sel | sel.delete(self,'ownedComment'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.updateReference(selection,'ownedComment')"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="element_definition_group" domainClass="uml::Element" semanticCandidateExpression="var:self">
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="element_profile_group" domainClass="uml::Element" semanticCandidateExpression="var:self" preconditionExpression="aql:self.isAttachedToResource()">
        <controls xsi:type="properties-advanced-controls:StereotypeApplicationDescription" name="appliedStereotypes" labelExpression="aql:'Applied stereotypes'" helpExpression="aql:'The List of Applied Stereotypes'"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="package_profile_group" domainClass="uml::Package" semanticCandidateExpression="var:self">
        <controls xsi:type="properties-advanced-controls:ProfileApplicationDescription" name="profileApplication" labelExpression="aql:'Profile applications'" helpExpression="aql:'The List of Applied Profiles'"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="memberEnd_uml_group" domainClass="uml::Association" semanticCandidateExpression="var:self" preconditionExpression="aql:not(self.memberEnd->isEmpty())">
        <controls xsi:type="properties:ContainerDescription" name="membersEnd">
          <controls xsi:type="properties-advanced-controls:ContainerBorderDescription" name="memberEndFirst" labelExpression="aql:'Member End'">
            <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).getFeatureDescription('name')" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).isMemberEndPropertyEditable('name')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).name">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1)">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:newValue"/>
                </firstModelOperations>
              </initialOperation>
            </controls>
            <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).isMemberEndPropertyEditable('label')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).getLabel()">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).setLabel(newValue)"/>
              </initialOperation>
            </controls>
            <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).getFeatureDescription('type')" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).isMemberEndPropertyEditable('type')" referenceNameExpression="aql:'type'" referenceOwnerExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1)" removeExpression="aql:selection->forAll(sel | sel.delete(self.oclAsType(uml::Association).memberEnd->at(1),'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).updateReference(selection,'type')"/>
            <controls xsi:type="properties:SelectDescription" name="owner" labelExpression="aql:'Owner'" helpExpression="aql:'The owner of the association.'" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).isMemberEndPropertyEditable('owner')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).getOwner()" candidatesExpression="aql:self.getOwnerEnumerations()" candidateDisplayExpression="aql:candidate.toString()">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).setOwner(newValue.oclAsType(ecore::EString))"/>
              </initialOperation>
            </controls>
            <controls xsi:type="properties:CheckboxDescription" name="isNavigable" labelExpression="Navigable" helpExpression="aql:'Indicates whether it is possible to navigate across the property.'" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).isMemberEndPropertyEditable('isNavigable')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).isNavigable()">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).setNavigable(newValue)"/>
              </initialOperation>
            </controls>
            <controls xsi:type="properties:SelectDescription" name="aggregation" labelExpression="aql:'Aggregation'" helpExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).getFeatureDescription('aggregation')" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).isMemberEndPropertyEditable('aggregation')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).eClass().getEStructuralFeature('aggregation').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.oclAsType(uml::Association).memberEnd->at(1).aggregation.toString())" candidatesExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).eClass().getEStructuralFeature('aggregation').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).oclAsType(uml::Property)">
                  <subModelOperations xsi:type="tool:SetValue" featureName="aggregation" valueExpression="aql:newValue.instance"/>
                </firstModelOperations>
              </initialOperation>
            </controls>
            <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).getMultiplicityHelpContent()" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).isMemberEndPropertyEditable('lowerValue') and self.oclAsType(uml::Association).memberEnd->at(1).isMemberEndPropertyEditable('upperValue')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).getMultiplicity()">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).oclAsType(uml::MultiplicityElement).setMultiplicity(newValue, input)"/>
              </initialOperation>
            </controls>
          </controls>
          <controls xsi:type="properties-advanced-controls:ContainerBorderDescription" name="memberEndLast" labelExpression="aql:'Member End'">
            <controls xsi:type="properties:TextDescription" name="name" labelExpression="aql:'Name'" helpExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).getFeatureDescription('name')" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).isMemberEndPropertyEditable('name')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).name">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2)">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:newValue"/>
                </firstModelOperations>
              </initialOperation>
            </controls>
            <controls xsi:type="properties:TextDescription" name="label" labelExpression="aql:'Label'" helpExpression="aql:'Local language label for the NamedElement.'" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).isMemberEndPropertyEditable('label')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).getLabel()">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).setLabel(newValue)"/>
              </initialOperation>
            </controls>
            <controls xsi:type="properties-advanced-controls:ExtEditableReferenceDescription" name="type" labelExpression="aql:'Type'" helpExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).getFeatureDescription('type')" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).isMemberEndPropertyEditable('type')" referenceNameExpression="aql:'type'" referenceOwnerExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2)" removeExpression="aql:selection->forAll(sel | sel.delete(self.oclAsType(uml::Association).memberEnd->at(2),'type'))" createExpression="aql:newElementContainer.create(newElementTypeName,newElementContainerFeatureName)" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).updateReference(selection,'type')"/>
            <controls xsi:type="properties:SelectDescription" name="owner" labelExpression="aql:'Owner'" helpExpression="aql:'The owner of the association.'" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).isMemberEndPropertyEditable('owner')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).getOwner()" candidatesExpression="aql:self.getOwnerEnumerations()" candidateDisplayExpression="aql:candidate.toString()">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).setOwner(newValue.oclAsType(ecore::EString))"/>
              </initialOperation>
            </controls>
            <controls xsi:type="properties:CheckboxDescription" name="isNavigable" labelExpression="Navigable" helpExpression="aql:'Indicates whether it is possible to navigate across the property.'" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).isMemberEndPropertyEditable('isNavigable')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).isNavigable()">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).setNavigable(newValue)"/>
              </initialOperation>
            </controls>
            <controls xsi:type="properties:SelectDescription" name="aggregation" labelExpression="aql:'Aggregation'" helpExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).getFeatureDescription('aggregation')" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).isMemberEndPropertyEditable('aggregation')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).eClass().getEStructuralFeature('aggregation').eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.oclAsType(uml::Association).memberEnd->at(2).aggregation.toString())" candidatesExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).eClass().getEStructuralFeature('aggregation').eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2)">
                  <subModelOperations xsi:type="tool:SetValue" featureName="aggregation" valueExpression="aql:newValue.instance"/>
                </firstModelOperations>
              </initialOperation>
            </controls>
            <controls xsi:type="properties:TextDescription" name="multiplicity" labelExpression="aql:'Multiplicity'" helpExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).getMultiplicityHelpContent()" isEnabledExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).isMemberEndPropertyEditable('lowerValue') and self.oclAsType(uml::Association).memberEnd->at(2).isMemberEndPropertyEditable('upperValue')" valueExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).getMultiplicity()">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).oclAsType(uml::MultiplicityElement).setMultiplicity(newValue, input)"/>
              </initialOperation>
            </controls>
          </controls>
          <layout xsi:type="properties:GridLayoutDescription" numberOfColumns="2"/>
        </controls>
        <validationSet>
          <propertyValidationRules name="memberEnd_uml_group_1_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.234/@controls.0/@controls.0/@controls.0">
            <audits auditExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="memberEnd_uml_group_1_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.234/@controls.0/@controls.0/@controls.6">
            <audits auditExpression="aql:self.oclAsType(uml::Association).memberEnd->at(1).validateMultiplicityField(input)"/>
          </propertyValidationRules>
          <propertyValidationRules name="memberEnd_uml_group_2_name_validation" level="WARNING" message="Name is indistinguishable from another element in the Namespace." targets="//@extensions.0/@categories.0/@groups.234/@controls.0/@controls.1/@controls.0">
            <audits auditExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).validateNamedElement()"/>
          </propertyValidationRules>
          <propertyValidationRules name="memberEnd_uml_group_2_multiplicity_validation" level="ERROR" message="aql:'The actual entry &quot;'+input.getMultiplicityAsString()+'&quot; is not a valid Multiplicity.'" targets="//@extensions.0/@categories.0/@groups.234/@controls.0/@controls.1/@controls.6">
            <audits auditExpression="aql:self.oclAsType(uml::Association).memberEnd->at(2).validateMultiplicityField(input)"/>
          </propertyValidationRules>
        </validationSet>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="profile_definition_group" domainClass="uml::Profile" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties-advanced-controls:InputContentPapyrusReferenceDescription" name="definitions" labelExpression="aql:'Definitions'" helpExpression="aql:'The list of definitions of this Profile'" isEnabledExpression="aql:true" referenceNameExpression="aql:'profileApplication'" removeExpression="aql:selection->forAll(sel | sel.oclAsType(ecore::EPackage).removeProfileDefinition(self.oclAsType(uml::Profile)))" inputContentExpression="aql:self.oclAsType(uml::Profile).getDefinitions()"/>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
      <groups name="profileDefinition_definition_group" domainClass="ecore::EPackage" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:TextDescription" name="version" labelExpression="aql:'Version'" helpExpression="aql:'Version'" isEnabledExpression="aql:false" valueExpression="aql:self.getProfileDefinitionVersion()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="date" labelExpression="aql:'Date'" helpExpression="aql:'Date'" isEnabledExpression="aql:false" valueExpression="aql:self.getProfileDefinitionDate()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="author" labelExpression="aql:'Author'" helpExpression="aql:'Author'" isEnabledExpression="aql:false" valueExpression="aql:self.getProfileDefinitionAuthor()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="copyright" labelExpression="aql:'Copyright'" helpExpression="aql:'Copyright'" isEnabledExpression="aql:false" valueExpression="aql:self.getProfileDefinitionCopyright()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextAreaDescription" name="comment" labelExpression="aql:'Comment'" helpExpression="aql:'Comment'" isEnabledExpression="aql:false" valueExpression="aql:self.getProfileDefinitionComment()">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <style barStyle="NO_TITLE" toggleStyle="NONE" expandedByDefault="true">
          <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
        </style>
      </groups>
    </categories>
    <metamodel href="http://www.eclipse.org/uml2/5.0.0/UML#/"/>
  </extensions>
</description:Group>
